(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-67ecb446"],{"0b22":function(e,n){e.exports=function(e){var n={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",literal:"true false iota nil",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{aliases:["golang"],keywords:n,illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",variants:[e.QUOTE_STRING_MODE,{begin:"'",end:"[^\\\\]'"},{begin:"`",end:"`"}]},{className:"number",variants:[{begin:e.C_NUMBER_RE+"[dflsi]",relevance:1},e.C_NUMBER_MODE]},{begin:/:=/},{className:"function",beginKeywords:"func",end:/\s*\{/,excludeEnd:!0,contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,keywords:n,illegal:/["']/}]}]}}},"1da1":function(e,n,t){"use strict";function o(e,n,t,o,r,a,i){try{var s=e[a](i),c=s.value}catch(l){return void t(l)}s.done?n(c):Promise.resolve(c).then(o,r)}function r(e){return function(){var n=this,t=arguments;return new Promise(function(r,a){var i=e.apply(n,t);function s(e){o(i,r,a,s,c,"next",e)}function c(e){o(i,r,a,s,c,"throw",e)}s(void 0)})}}t.d(n,"a",function(){return r})},"214f":function(e,n,t){"use strict";var o=t("32e9"),r=t("2aba"),a=t("79e5"),i=t("be13"),s=t("2b4c");e.exports=function(e,n,t){var c=s(e),l=t(i,c,""[e]),p=l[0],d=l[1];a(function(){var n={};return n[c]=function(){return 7},7!=""[e](n)})&&(r(String.prototype,e,p),o(RegExp.prototype,c,2==n?function(e,n){return d.call(e,this,n)}:function(e){return d.call(e,this)}))}},"3c69":function(e,n){e.exports=function(e){return{lexemes:/[!#@\w]+/,keywords:{keyword:"N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank",built_in:"synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"},illegal:/;/,contains:[e.NUMBER_MODE,{className:"string",begin:"'",end:"'",illegal:"\\n"},{className:"string",begin:/"(\\"|\n\\|[^"\n])*"/},e.COMMENT('"',"$"),{className:"variable",begin:/[bwtglsav]:[\w\d_]*/},{className:"function",beginKeywords:"function function!",end:"$",relevance:0,contains:[e.TITLE_MODE,{className:"params",begin:"\\(",end:"\\)"}]},{className:"symbol",begin:/<[\w-]+>/}]}}},"4dd1":function(e,n){e.exports=function(e){var n="[A-Za-z$_][0-9A-Za-z$_]*",t={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},o={className:"number",variants:[{begin:"\\b(0[bB][01]+)"},{begin:"\\b(0[oO][0-7]+)"},{begin:e.C_NUMBER_RE}],relevance:0},r={className:"subst",begin:"\\$\\{",end:"\\}",keywords:t,contains:[]},a={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,r]};r.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,a,o,e.REGEXP_MODE];var i=r.contains.concat([e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]);return{aliases:["js","jsx"],keywords:t,contains:[{className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},{className:"meta",begin:/^#!/,end:/$/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,a,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,o,{begin:/[{,]\s*/,relevance:0,contains:[{begin:n+"\\s*:",returnBegin:!0,relevance:0,contains:[{className:"attr",begin:n,relevance:0}]}]},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+n+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:n},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:t,contains:i}]}]},{begin:/</,end:/(\/\w+|\w+\/)>/,subLanguage:"xml",contains:[{begin:/<\w+\s*\/>/,skip:!0},{begin:/<\w+/,end:/(\/\w+|\w+\/)>/,skip:!0,contains:[{begin:/<\w+\s*\/>/,skip:!0},"self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:n}),{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:i}],illegal:/\[|%/},{begin:/\$[(.]/},e.METHOD_GUARD,{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"constructor",end:/\{/,excludeEnd:!0}],illegal:/#(?!!)/}}},5248:function(e,n,t){"use strict";var o=t("c6f5"),r=t.n(o);r.a},8159:function(e,n,t){},9510:function(e,n){e.exports=function(e){var n={keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10 None True False",built_in:"Ellipsis NotImplemented"},t={className:"meta",begin:/^(>>>|\.\.\.) /},o={className:"subst",begin:/\{/,end:/\}/,keywords:n,illegal:/#/},r={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/(u|b)?r?'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,t],relevance:10},{begin:/(u|b)?r?"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,t],relevance:10},{begin:/(fr|rf|f)'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,t,o]},{begin:/(fr|rf|f)"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,t,o]},{begin:/(u|r|ur)'/,end:/'/,relevance:10},{begin:/(u|r|ur)"/,end:/"/,relevance:10},{begin:/(b|br)'/,end:/'/},{begin:/(b|br)"/,end:/"/},{begin:/(fr|rf|f)'/,end:/'/,contains:[e.BACKSLASH_ESCAPE,o]},{begin:/(fr|rf|f)"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,o]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},a={className:"number",relevance:0,variants:[{begin:e.BINARY_NUMBER_RE+"[lLjJ]?"},{begin:"\\b(0o[0-7]+)[lLjJ]?"},{begin:e.C_NUMBER_RE+"[lLjJ]?"}]},i={className:"params",begin:/\(/,end:/\)/,contains:["self",t,a,r]};return o.contains=[r,a,t],{aliases:["py","gyp"],keywords:n,illegal:/(<\/|->|\?)|=>/,contains:[t,a,r,e.HASH_COMMENT_MODE,{variants:[{className:"function",beginKeywords:"def"},{className:"class",beginKeywords:"class"}],end:/:/,illegal:/[${=;\n,]/,contains:[e.UNDERSCORE_TITLE_MODE,i,{begin:/->/,endsWithParent:!0,keywords:"None"}]},{className:"meta",begin:/^[\t ]*@/,end:/$/},{begin:/\b(print|exec)\(/}]}}},"96cf":function(e,n){!function(n){"use strict";var t,o=Object.prototype,r=o.hasOwnProperty,a="function"===typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag",l="object"===typeof e,p=n.regeneratorRuntime;if(p)l&&(e.exports=p);else{p=n.regeneratorRuntime=l?e.exports:{},p.wrap=w;var d="suspendedStart",u="suspendedYield",m="executing",h="completed",g={},f={};f[i]=function(){return this};var b=Object.getPrototypeOf,v=b&&b(b(L([])));v&&v!==o&&r.call(v,i)&&(f=v);var y=R.prototype=_.prototype=Object.create(f);k.prototype=y.constructor=R,R.constructor=k,R[c]=k.displayName="GeneratorFunction",p.isGeneratorFunction=function(e){var n="function"===typeof e&&e.constructor;return!!n&&(n===k||"GeneratorFunction"===(n.displayName||n.name))},p.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,R):(e.__proto__=R,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(y),e},p.awrap=function(e){return{__await:e}},A(x.prototype),x.prototype[s]=function(){return this},p.AsyncIterator=x,p.async=function(e,n,t,o){var r=new x(w(e,n,t,o));return p.isGeneratorFunction(n)?r:r.next().then(function(e){return e.done?e.value:r.next()})},A(y),y[c]="Generator",y[i]=function(){return this},y.toString=function(){return"[object Generator]"},p.keys=function(e){var n=[];for(var t in e)n.push(t);return n.reverse(),function t(){while(n.length){var o=n.pop();if(o in e)return t.value=o,t.done=!1,t}return t.done=!0,t}},p.values=L,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(q),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0],n=e.completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(o,r){return s.type="throw",s.arg=e,n.next=o,r&&(n.method="next",n.arg=t),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(c&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,n){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=n&&n<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=n,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),g},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),q(t),g}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var o=t.completion;if("throw"===o.type){var r=o.arg;q(t)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,o){return this.delegate={iterator:L(e),resultName:n,nextLoc:o},"next"===this.method&&(this.arg=t),g}}}function w(e,n,t,o){var r=n&&n.prototype instanceof _?n:_,a=Object.create(r.prototype),i=new M(o||[]);return a._invoke=S(e,t,i),a}function E(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(o){return{type:"throw",arg:o}}}function _(){}function k(){}function R(){}function A(e){["next","throw","return"].forEach(function(n){e[n]=function(e){return this._invoke(n,e)}})}function x(e){function n(t,o,a,i){var s=E(e[t],e,o);if("throw"!==s.type){var c=s.arg,l=c.value;return l&&"object"===typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(e){n("next",e,a,i)},function(e){n("throw",e,a,i)}):Promise.resolve(l).then(function(e){c.value=e,a(c)},function(e){return n("throw",e,a,i)})}i(s.arg)}var t;function o(e,o){function r(){return new Promise(function(t,r){n(e,o,t,r)})}return t=t?t.then(r,r):r()}this._invoke=o}function S(e,n,t){var o=d;return function(r,a){if(o===m)throw new Error("Generator is already running");if(o===h){if("throw"===r)throw a;return T()}t.method=r,t.arg=a;while(1){var i=t.delegate;if(i){var s=N(i,t);if(s){if(s===g)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(o===d)throw o=h,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);o=m;var c=E(e,n,t);if("normal"===c.type){if(o=t.done?h:u,c.arg===g)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(o=h,t.method="throw",t.arg=c.arg)}}}function N(e,n){var o=e.iterator[n.method];if(o===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,N(e,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var r=E(o,e.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,g;var a=r.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function q(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function M(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function L(e){if(e){var n=e[i];if(n)return n.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){while(++o<e.length)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:T}}function T(){return{value:t,done:!0}}}(function(){return this||"object"===typeof self&&self}()||Function("return this")())},a481:function(e,n,t){t("214f")("replace",2,function(e,n,t){return[function(o,r){"use strict";var a=e(this),i=void 0==o?void 0:o[n];return void 0!==i?i.call(o,a,r):t.call(String(a),o,r)},t]})},a70e:function(e,n,t){(function(e){"object"===typeof window&&window||"object"===typeof self&&self;e(n)})(function(e){var n=[],t=Object.keys,o={},r={},a=/^(no-?highlight|plain|text)$/i,i=/\blang(?:uage)?-([\w-]+)\b/i,s=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,c="</span>",l={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};function p(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function d(e){return e.nodeName.toLowerCase()}function u(e,n){var t=e&&e.exec(n);return t&&0===t.index}function m(e){return a.test(e)}function h(e){var n,t,o,r,a=e.className+" ";if(a+=e.parentNode?e.parentNode.className:"",t=i.exec(a),t)return q(t[1])?t[1]:"no-highlight";for(a=a.split(/\s+/),n=0,o=a.length;n<o;n++)if(r=a[n],m(r)||q(r))return r}function g(e){var n,t={},o=Array.prototype.slice.call(arguments,1);for(n in e)t[n]=e[n];return o.forEach(function(e){for(n in e)t[n]=e[n]}),t}function f(e){var n=[];return function e(t,o){for(var r=t.firstChild;r;r=r.nextSibling)3===r.nodeType?o+=r.nodeValue.length:1===r.nodeType&&(n.push({event:"start",offset:o,node:r}),o=e(r,o),d(r).match(/br|hr|img|input/)||n.push({event:"stop",offset:o,node:r}));return o}(e,0),n}function b(e,t,o){var r=0,a="",i=[];function s(){return e.length&&t.length?e[0].offset!==t[0].offset?e[0].offset<t[0].offset?e:t:"start"===t[0].event?e:t:e.length?e:t}function c(e){function t(e){return" "+e.nodeName+'="'+p(e.value).replace('"',"&quot;")+'"'}a+="<"+d(e)+n.map.call(e.attributes,t).join("")+">"}function l(e){a+="</"+d(e)+">"}function u(e){("start"===e.event?c:l)(e.node)}while(e.length||t.length){var m=s();if(a+=p(o.substring(r,m[0].offset)),r=m[0].offset,m===e){i.reverse().forEach(l);do{u(m.splice(0,1)[0]),m=s()}while(m===e&&m.length&&m[0].offset===r);i.reverse().forEach(c)}else"start"===m[0].event?i.push(m[0].node):i.pop(),u(m.splice(0,1)[0])}return a+p(o.substr(r))}function v(e){return e.variants&&!e.cached_variants&&(e.cached_variants=e.variants.map(function(n){return g(e,{variants:null},n)})),e.cached_variants||e.endsWithParent&&[g(e)]||[e]}function y(e){function n(e){return e&&e.source||e}function o(t,o){return new RegExp(n(t),"m"+(e.case_insensitive?"i":"")+(o?"g":""))}function r(a,i){if(!a.compiled){if(a.compiled=!0,a.keywords=a.keywords||a.beginKeywords,a.keywords){var s={},c=function(n,t){e.case_insensitive&&(t=t.toLowerCase()),t.split(" ").forEach(function(e){var t=e.split("|");s[t[0]]=[n,t[1]?Number(t[1]):1]})};"string"===typeof a.keywords?c("keyword",a.keywords):t(a.keywords).forEach(function(e){c(e,a.keywords[e])}),a.keywords=s}a.lexemesRe=o(a.lexemes||/\w+/,!0),i&&(a.beginKeywords&&(a.begin="\\b("+a.beginKeywords.split(" ").join("|")+")\\b"),a.begin||(a.begin=/\B|\b/),a.beginRe=o(a.begin),a.endSameAsBegin&&(a.end=a.begin),a.end||a.endsWithParent||(a.end=/\B|\b/),a.end&&(a.endRe=o(a.end)),a.terminator_end=n(a.end)||"",a.endsWithParent&&i.terminator_end&&(a.terminator_end+=(a.end?"|":"")+i.terminator_end)),a.illegal&&(a.illegalRe=o(a.illegal)),null==a.relevance&&(a.relevance=1),a.contains||(a.contains=[]),a.contains=Array.prototype.concat.apply([],a.contains.map(function(e){return v("self"===e?a:e)})),a.contains.forEach(function(e){r(e,a)}),a.starts&&r(a.starts,i);var l=a.contains.map(function(e){return e.beginKeywords?"\\.?("+e.begin+")\\.?":e.begin}).concat([a.terminator_end,a.illegal]).map(n).filter(Boolean);a.terminators=l.length?o(l.join("|"),!0):{exec:function(){return null}}}}r(e)}function w(e,n,t,r){function a(e){return new RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),"m")}function i(e,n){var t,o;for(t=0,o=n.contains.length;t<o;t++)if(u(n.contains[t].beginRe,e))return n.contains[t].endSameAsBegin&&(n.contains[t].endRe=a(n.contains[t].beginRe.exec(e)[0])),n.contains[t]}function s(e,n){if(u(e.endRe,n)){while(e.endsParent&&e.parent)e=e.parent;return e}if(e.endsWithParent)return s(e.parent,n)}function d(e,n){return!t&&u(n.illegalRe,e)}function m(e,n){var t=k.case_insensitive?n[0].toLowerCase():n[0];return e.keywords.hasOwnProperty(t)&&e.keywords[t]}function h(e,n,t,o){var r=o?"":l.classPrefix,a='<span class="'+r,i=t?"":c;return a+=e+'">',a+n+i}function g(){var e,n,t,o;if(!A.keywords)return p(N);o="",n=0,A.lexemesRe.lastIndex=0,t=A.lexemesRe.exec(N);while(t)o+=p(N.substring(n,t.index)),e=m(A,t),e?(C+=e[1],o+=h(e[0],p(t[0]))):o+=p(t[0]),n=A.lexemesRe.lastIndex,t=A.lexemesRe.exec(N);return o+p(N.substr(n))}function f(){var e="string"===typeof A.subLanguage;if(e&&!o[A.subLanguage])return p(N);var n=e?w(A.subLanguage,N,!0,x[A.subLanguage]):E(N,A.subLanguage.length?A.subLanguage:void 0);return A.relevance>0&&(C+=n.relevance),e&&(x[A.subLanguage]=n.top),h(n.language,n.value,!1,!0)}function b(){S+=null!=A.subLanguage?f():g(),N=""}function v(e){S+=e.className?h(e.className,"",!0):"",A=Object.create(e,{parent:{value:A}})}function _(e,n){if(N+=e,null==n)return b(),0;var t=i(n,A);if(t)return t.skip?N+=n:(t.excludeBegin&&(N+=n),b(),t.returnBegin||t.excludeBegin||(N=n)),v(t,n),t.returnBegin?0:n.length;var o=s(A,n);if(o){var r=A;r.skip?N+=n:(r.returnEnd||r.excludeEnd||(N+=n),b(),r.excludeEnd&&(N=n));do{A.className&&(S+=c),A.skip||A.subLanguage||(C+=A.relevance),A=A.parent}while(A!==o.parent);return o.starts&&(o.endSameAsBegin&&(o.starts.endRe=o.endRe),v(o.starts,"")),r.returnEnd?0:n.length}if(d(n,A))throw new Error('Illegal lexeme "'+n+'" for mode "'+(A.className||"<unnamed>")+'"');return N+=n,n.length||1}var k=q(e);if(!k)throw new Error('Unknown language: "'+e+'"');y(k);var R,A=r||k,x={},S="";for(R=A;R!==k;R=R.parent)R.className&&(S=h(R.className,"",!0)+S);var N="",C=0;try{var M,L,T=0;while(1){if(A.terminators.lastIndex=T,M=A.terminators.exec(n),!M)break;L=_(n.substring(T,M.index),M[0]),T=M.index+L}for(_(n.substr(T)),R=A;R.parent;R=R.parent)R.className&&(S+=c);return{relevance:C,value:S,language:e,top:A}}catch(P){if(P.message&&-1!==P.message.indexOf("Illegal"))return{relevance:0,value:p(n)};throw P}}function E(e,n){n=n||l.languages||t(o);var r={relevance:0,value:p(e)},a=r;return n.filter(q).filter(M).forEach(function(n){var t=w(n,e,!1);t.language=n,t.relevance>a.relevance&&(a=t),t.relevance>r.relevance&&(a=r,r=t)}),a.language&&(r.second_best=a),r}function _(e){return l.tabReplace||l.useBR?e.replace(s,function(e,n){return l.useBR&&"\n"===e?"<br>":l.tabReplace?n.replace(/\t/g,l.tabReplace):""}):e}function k(e,n,t){var o=n?r[n]:t,a=[e.trim()];return e.match(/\bhljs\b/)||a.push("hljs"),-1===e.indexOf(o)&&a.push(o),a.join(" ").trim()}function R(e){var n,t,o,r,a,i=h(e);m(i)||(l.useBR?(n=document.createElementNS("http://www.w3.org/1999/xhtml","div"),n.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):n=e,a=n.textContent,o=i?w(i,a,!0):E(a),t=f(n),t.length&&(r=document.createElementNS("http://www.w3.org/1999/xhtml","div"),r.innerHTML=o.value,o.value=b(t,f(r),a)),o.value=_(o.value),e.innerHTML=o.value,e.className=k(e.className,i,o.language),e.result={language:o.language,re:o.relevance},o.second_best&&(e.second_best={language:o.second_best.language,re:o.second_best.relevance}))}function A(e){l=g(l,e)}function x(){if(!x.called){x.called=!0;var e=document.querySelectorAll("pre code");n.forEach.call(e,R)}}function S(){addEventListener("DOMContentLoaded",x,!1),addEventListener("load",x,!1)}function N(n,t){var a=o[n]=t(e);a.aliases&&a.aliases.forEach(function(e){r[e]=n})}function C(){return t(o)}function q(e){return e=(e||"").toLowerCase(),o[e]||o[r[e]]}function M(e){var n=q(e);return n&&!n.disableAutodetect}return e.highlight=w,e.highlightAuto=E,e.fixMarkup=_,e.highlightBlock=R,e.configure=A,e.initHighlighting=x,e.initHighlightingOnLoad=S,e.registerLanguage=N,e.listLanguages=C,e.getLanguage=q,e.autoDetection=M,e.inherit=g,e.IDENT_RE="[a-zA-Z]\\w*",e.UNDERSCORE_IDENT_RE="[a-zA-Z_]\\w*",e.NUMBER_RE="\\b\\d+(\\.\\d+)?",e.C_NUMBER_RE="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BINARY_NUMBER_RE="\\b(0b[01]+)",e.RE_STARTERS_RE="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BACKSLASH_ESCAPE={begin:"\\\\[\\s\\S]",relevance:0},e.APOS_STRING_MODE={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.QUOTE_STRING_MODE={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.PHRASAL_WORDS_MODE={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.COMMENT=function(n,t,o){var r=e.inherit({className:"comment",begin:n,end:t,contains:[]},o||{});return r.contains.push(e.PHRASAL_WORDS_MODE),r.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|XXX):",relevance:0}),r},e.C_LINE_COMMENT_MODE=e.COMMENT("//","$"),e.C_BLOCK_COMMENT_MODE=e.COMMENT("/\\*","\\*/"),e.HASH_COMMENT_MODE=e.COMMENT("#","$"),e.NUMBER_MODE={className:"number",begin:e.NUMBER_RE,relevance:0},e.C_NUMBER_MODE={className:"number",begin:e.C_NUMBER_RE,relevance:0},e.BINARY_NUMBER_MODE={className:"number",begin:e.BINARY_NUMBER_RE,relevance:0},e.CSS_NUMBER_MODE={className:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},e.REGEXP_MODE={className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,{begin:/\[/,end:/\]/,relevance:0,contains:[e.BACKSLASH_ESCAPE]}]},e.TITLE_MODE={className:"title",begin:e.IDENT_RE,relevance:0},e.UNDERSCORE_TITLE_MODE={className:"title",begin:e.UNDERSCORE_IDENT_RE,relevance:0},e.METHOD_GUARD={begin:"\\.\\s*"+e.UNDERSCORE_IDENT_RE,relevance:0},e})},ac6a:function(e,n,t){for(var o=t("cadf"),r=t("0d58"),a=t("2aba"),i=t("7726"),s=t("32e9"),c=t("84f2"),l=t("2b4c"),p=l("iterator"),d=l("toStringTag"),u=c.Array,m={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=r(m),g=0;g<h.length;g++){var f,b=h[g],v=m[b],y=i[b],w=y&&y.prototype;if(w&&(w[p]||s(w,p,u),w[d]||s(w,d,b),c[b]=u,v))for(f in o)w[f]||a(w,f,o[f],!0)}},b4a7:function(e,n,t){"use strict";t.r(n);var o=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{attrs:{id:"blog"}},[void 0!==e.year?t("div",{attrs:{id:"blog-contents-element"}},[t("article",[t("div",{staticClass:"inner-title-container"},[t("h1",{attrs:{id:"inner-title"}},[e._v(e._s(e.title))]),t("div",{attrs:{id:"inner-date"}},[e._v(e._s(e.year)+"."+e._s(e.month)+"."+e._s(e.day))])]),t("div",{attrs:{id:"article-content"},domProps:{innerHTML:e._s(e.articleHtmlSource)}})]),t("hr"),t("div",{attrs:{id:"disqus_thread"}})]):t("div",e._l(e.index,function(n){return t("div",{key:n,staticClass:"blog-list-element"},[t("router-link",{staticClass:"blog-title",attrs:{to:n.uri}},[e._v(e._s(n.title))]),t("span",{staticClass:"blog-date"},[e._v(e._s(n.date))]),t("hr",{staticClass:"separate-line"})],1)}))])},r=[],a=(t("ac6a"),t("a481"),t("96cf"),t("1da1")),i=t("a70e"),s=t.n(i);t("8159");s.a.registerLanguage("bash",t("f0f8")),s.a.registerLanguage("python",t("9510")),s.a.registerLanguage("vim",t("3c69")),s.a.registerLanguage("shell",t("b65b")),s.a.registerLanguage("go",t("0b22")),s.a.registerLanguage("javascript",t("4dd1")),s.a.registerLanguage("django",t("d248"));var c={name:"devRecordBlog",metaInfo:function(){return void 0===this.title?{title:"Blog",meta:[{charset:"utf-8"},{property:"og:title",content:"Blog",template:function(e){return"".concat(e," :: bkshin")},vmid:"og:title"},{property:"og:description",content:"Article List",template:function(e){return"".concat(e)},vmid:"og:description"}]}:{title:this.titleForMeta,meta:[{charset:"utf-8"},{property:"og:title",content:this.title,template:function(e){return"".concat(e," :: bkshin")},vmid:"og:title"},{property:"og:description",content:"Thank you for reading my article ",template:function(e){return"".concat(e)},vmid:"og:description"}]}},methods:{initDisqus:function(e,n,t,o){"undefined"===typeof DISQUS?Object(a["a"])(regeneratorRuntime.mark(function r(){var a,i,s;return regeneratorRuntime.wrap(function(r){while(1)switch(r.prev=r.next){case 0:a='var disqus_shortname  = "'+e+'";\nvar disqus_title      = "'+t+'";\nvar disqus_identifier = "'+n+'";\nvar disqus_url        = "'+o+'";\n',i=document.createElement("script"),i.type="text/javascript",i.async=!0,i.text=a,(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(i),s=document.createElement("script"),s.type="text/javascript",s.async=!0,s.src="//"+e+".disqus.com/embed.js",(document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0]).appendChild(s);case 11:case"end":return r.stop()}},r,this)}))():DISQUS.reset({reload:!0,config:function(){this.page.identifier=n,this.page.url=o,this.page.title=t}})},totheTop:function(){document.body.scrollTop=0,document.documentElement.scrollTop=0},getPage:function(){var e=this;if(void 0!==this.year){this.totheTop();var n="/blog_contents/dev_record/"+this.year+"/"+this.month+"/"+this.day+"/"+this.title+".html";fetch(n).then(function(e){return e.text()}).then(function(n){return e.articleHtmlSource=n})}}},mounted:function(){this.getPage()},updated:function(){var e=document.querySelector("#blog-contents-element");if(null!=e){var n=e.querySelectorAll("h1");if(!(n.length<=1)){var t=e.querySelector("#inner-title");t.innerHTML=n[1].innerHTML,n[1].style.display="none",this.titleForMeta=t.innerHTML,this.initDisqus("bkshin",this.address.replace(this.domain,""),this.title,this.address),[].forEach.call(document.querySelectorAll("code"),function(e){s.a.highlightBlock(e)})}}},data:function(){return{index:[{title:"DATA - 2. Jupyter Notebooks",author:'파이썬으로 데이터분석하는 사람들에게 주피터는 너무나 유명해서 자세한 설명은 생략하겠습니다. Jupyter는 <strong>Ju</strong>lia, <strong>Pyt</strong>hon, <strong>R</strong>의 약자입니다. 주피터 노트북은 text document, code, 수식, 그래프, 코드 결과를 하나의 파일 (.ipynb)에 담을 수 있는 장점이 있습니다. 기존 방식대로라면 text document는 word 파일에, code는 code editor에 담아야 했고, 그래프 등의 시각화자료는 별도의 창에서 볼 수 있었습니다. <a href="https://github.com/mcleonard/blog_posts/blob/master/body_fat_percentage.ipynb">(Reference1)</a>을 보시면 이해가 쉽게 갈 겁니다.</p>\n<p>주피터 노트북의 동작원리는 아래와 같습니다. 브라우저에 코드를 입력해주면 주피터 서버에서 처리를 해주고 결과 값을 브라우저에 렌더링해줍니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/03/22/DAND2_1.PNG" alt="Jupyter 동작원리" /><figcaption>Jupyter 동작원리</figcaption>\n</figure>\n<h3 id="jupyter-notebook-설치-및-실행">Jupyter Notebook 설치 및 실행</h3>\n<pre class="bash"><code>conda install jupyter notebook</code></pre>\n<p>위 코드로 주피터 노트북을 설치할 수 있습니다. 아래 코드는 방금 설치한 주피터 노트북을 실행합니다.</p>\n<pre class="bash"><code>jupyter notebook</code></pre>\n<p>기본적으로 주소를 보면 localhost:8888로 되어 있을 겁니다. 저는 localhost:8888을 사용하고 있어 localhost:8889라고 뜹니다. Files에는 컴퓨터 환경에 따라 여러 파일 및 폴더가 보일 수 있습니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/03/22/DAND2_2.PNG" alt="Jupyter notebook 실행화면" /><figcaption>Jupyter notebook 실행화면</figcaption>\n</figure>\n<p>주피터 노트북에서 Conda를 사용하기 위해 prompt에 notebook conda를 설치합니다.</p>\n<pre class="bash"><code>conda install nb_conda</code></pre>\n<p>nb_conda 설치 후 다시 주피터 노트북을 실행해보면 Files, Running, Clusters 이외에 Conda 툴바가 나타납니다. 주피터를 통해 Conda 환경을 관리할 수 있는 메뉴입니다. 주피터의 Conda 메뉴에서 가상환경을 만들고 패키지를 설치하고 업그레이드하고 가상환경을 내보내기 등을 할 수 있습니다.</p>\n<h3 id="jupyter-notebook-사용법">Jupyter notebook 사용법</h3>\n<p>주피터 노트북의 툴바를 이것 저것 써보면 어떤 기능을 하는지 쉽게 알 수 있습니다. 오른쪽 위에 조그만 동그라미가 있습니다. 코드가 실행 중일 때는 까만 동그라미로 바뀝니다. 대부분의 코드는 금방 실행이 되기 때문에 까만 동그라미를 오래 보기 힘듭니다. 시간이 오래걸리는 코드에서는 까만 동그라미를 볼 수 있기 때문에 동그라미를 통해 코드가 실행중인지 아닌지를 알 수 있습니다. Command palette (오른쪽 조그마한 키보드 모양)에서는 다양한 command를 검색하고 실행할 수 있습니다. 보다 자세한 사용법은 <a href="https://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Notebook%20Basics.html#The-Notebook-dashboard">(Reference2)</a>를 참고하시기 바랍니다.</p>\n<h3 id="markdown">Markdown</h3>\n<p>주피터 노트북의 cell에는 Markdown 기능이 있습니다. Markdown 문법을 정말 몇개 없어서 쉽게 익힐 수 있습니다. <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">(Reference3)</a></p>\n<h3 id="latex">LaTeX</h3>\n<p>데이터 분석을 하다보면 수식을 사용해야할 때가 많습니다. 주피터 노트북에서는 LaTeX를 이용해 쉽게 수식을 표현할 수 있습니다. <a href="https://www.latex-tutorial.com/">(Reference4)</a></p>\n<pre><code>\\begin{align}\nf(x) &amp;= x^2\\\\\nf&#39;(x) &amp;= 2x\\\\\nF(x) &amp;= \\int f(x)dx\\\\\nF(x) &amp;= \\frac{1}{3}x^3\n\\end{align}</code></pre>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/03/22/DAND2_6.PNG" alt="LaTeX Examples" /><figcaption>LaTeX Examples</figcaption>\n</figure>\n<h3 id="magic-keywords">Magic keywords</h3>\n<p>매직키워드는 주피터 노트북 cell에서 사용할 수 있는 특별한 커맨드입니다. %혹은 %%로 시작합니다. (%는 해당 line에서만 적용되는 line magics, %%는 cell 전체에서 적용되는 cell magics입니다.)</p>\n<p><code>%timeit</code> 은 해당 라인의 코드가 실행되는데 걸리는 시간을 계산해줍니다. (아래 예시 참고)</p>\n<p><img src="https://cdn.bkshin.com/devRecord/2019/03/22/DAND2_3.png" alt="%timeit Examples" /> <code>%%timeit</code>은 cell 전체의 코드가 실행되는데 걸리는 시간을 계산해줍니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/03/22/DAND2_4.png" alt="%%timeit Examples" /><figcaption>%%timeit Examples</figcaption>\n</figure>\n<p>아래의 Magic Keyword를 쓰면 matplotlib으로 그래프를 그릴 때 고화질로 그려줍니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/03/22/DAND2_5.png" alt="retina Example" /><figcaption>retina Example</figcaption>\n</figure>\n<p>이 Magic Keyword를 통해 디버거를 사용할 수 있습니다. <a href="https://docs.python.org/3/library/pdb.html">(Reference5)</a></p>\n<pre class="python"><code>%pdb</code></pre>\n<h3 id="다른-파일로-converting하기">다른 파일로 Converting하기</h3>\n<p>주피터 노트북은 JSON파일입니다. JSON파일을 다른 파일로 변환할 수 있듯이 <code>nbconvert</code>를 활용하여 노트북을 다른 파일로 쉽게 변경할 수 있습니다. 아래 코드는 주피터 노트북 파일을 HTML로 변환하는 코드입니다. <a href="https://nbconvert.readthedocs.io/en/latest/usage.html">(Reference6)</a></p>\n<pre class="bash"><code>jupyter nbconvert --to html notebook.ipynb</code></pre>\n<p>아래 코드는 notebook 파일을 slide로 변환해줍니다. 이는 주피터 노트북에서 View - Cell Toolbar - Slideshow를 누르는 것과 같은 기능입니다.</p>\n<pre class="bash"><code>jupyter nbconvert notebook.ipynb --to slides</code></pre>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/03/22/data-installJupyther/",date:"2019/03/22"},{title:"DATA - 1. Anaconda",author:'Anaconda란?</h3>\n<p>Anaconda(아나콘다)는 <strong>데이터 사이언스</strong>를 위한 패키지 배포판입니다. Windows, Linux, Mac OS 환경에서 사용가능하며, conda라는 package, environment 매니저를 사용합니다. conda를 이용해서 서로 다른 버전의 파이썬 (python2, python3)이나 서로 다른 패키지 등을 쓰는 독립적인 프로젝트 환경을 만들 수 있습니다. 그렇게 만들어진 환경 안에서 원하는 패키지를 설치, 삭제, 업데이트할 수 있습니다.</p>\n<h3 id="anaconda-설치">Anaconda 설치</h3>\n<p>우선, <a href="https://www.anaconda.com/download/">(Refercence1)</a> 본 링크에서 Anaconda를 다운받습니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/03/20/DAND1_1.PNG" alt="Download Anaconda" /><figcaption>Download Anaconda</figcaption>\n</figure>\n<p>python2 말고 python3 버전을 받되, 본인의 환경에 맞는 것을 다운 받습니다. 저는 windows 64-bit 버전을 받았습니다.</p>\n<p><br></p>\n<h3 id="프로그램-설명-및-초기-설정">프로그램 설명 및 초기 설정</h3>\n<p>Anaconda를 설치하면 여러 프로그램이 깔릴 겁니다.</p>\n<ol type="1">\n<li><strong>Anaconda Navigator</strong>: environment와 packages를 관리하는 GUI입니다.</li>\n<li><strong>Anaconda Prompt</strong>: CLI를 사용할 수 있는 터미널입니다.</li>\n<li><strong>Spyder</strong>: IDE 입니다.</li>\n</ol>\n<p>Anaconda Prompt를 실행해서 추후 발생할 수 있는 오류를 피하기 위해 아래와 같이 업그레이드를 해줍니다.</p>\n<pre class="bash"><code>conda upgrade conda\nconda upgrade --all</code></pre>\n<p>사실 <code>--all</code>에는 <code>conda</code>가 포함되어 있지만 일부 환경에서는 오류가 있을 수 있어 위와 같이 해주는 것입니다. 설치 및 업그레이드는 시간이 다소 소요됩니다.</p>\n<p>zsh를 사용하고 있고 &quot;conda command not found&quot;가 뜬다면 .zsh_config에 아래 코드를 추가해주면 해결됩니다.</p>\n<pre class="bash"><code>export PATH=&quot;/Users/username/anaconda/vin:$PATH&quot;</code></pre>\n<p><br></p>\n<h3 id="conda를-활용한-패키지-관리">Conda를 활용한 패키지 관리</h3>\n<ul>\n<li>현재 설치되어 있는 패키지 보기</li>\n</ul>\n<pre class="bash"><code>conda list</code></pre>\n<p>이 코드는 현재 environment에 설치된 모든 패키지를 나열해줍니다.</p>\n<ul>\n<li>패키지 설치</li>\n</ul>\n<pre class="bash"><code>conda install package_name</code></pre>\n<p>예를 들어 numpy를 설치하려면 아래와 같이 입력해주면 됩니다.</p>\n<pre class="bash"><code>conda install numpy</code></pre>\n<p>패키지를 차례로 나열하면 여러 패키지를 동시에 설치에 설치할 수 있습니다.</p>\n<pre class="bash"><code>conda install numpy pandas scipy</code></pre>\n<p>scipy 패키지는 numpy 패키지를 필요로 합니다. 즉, scipy를 사용하기 위해서는 scipy뿐만 아니라 numpy도 설치를 해야한다는 뜻입니다. Conda는 dependency가 있는 패키지를 자동으로 설치해줍니다.</p>\n<pre class="bash"><code>conda install scipy</code></pre>\n<p>와 같이 scipy를 설치하면 자동으로 numpy도 설치해줍니다. 즉, 위 코드와 아래 코드는 동일하게 작용합니다.</p>\n<pre class="bash"><code>conda install scipy numpy</code></pre>\n<p>아래와 같이 패키지의 버전을 지정해줄 수도 있습니다. 버전 지정을 안하면 가장 최신 버전으로 설치합니다.</p>\n<pre class="bash"><code>conda install numpy=1.10</code></pre>\n<ul>\n<li>패키지 삭제</li>\n</ul>\n<pre class="bash"><code>conda remove package_name</code></pre>\n<ul>\n<li>패키지 업그레이드</li>\n</ul>\n<pre class="bash"><code>conda upgrade package_name</code></pre>\n<p>현재 설치되어 있는 모든 패키지 업그레이드는 아래와 같이 합니다.</p>\n<pre class="bash"><code>conda upgrade --all</code></pre>\n<p><br></p>\n<h3 id="conda를-활용한-가상환경-관리">Conda를 활용한 가상환경 관리</h3>\n<ul>\n<li>가상환경 생성</li>\n</ul>\n<pre class="bash"><code>conda create -n environment_name list_of_packages</code></pre>\n<p>-n 은 name을 뜻합니다. <code>environment_name</code>에 원하는 가상환경 이름을 적어주고 list_of_packages에 해당 가상환경에 설치할 패키지를 적어줍니다.</p>\n<p>예를 들면 아래와 같습니다. pandas 패키지가 설치된 my_env라는 이름을 가진 가상환경을 만들어줍니다.</p>\n<pre class="bash"><code>conda create -n my_env pandas</code></pre>\n<ul>\n<li>가상환경 실행</li>\n</ul>\n<pre class="bash"><code>conda activate my_env</code></pre>\n<ul>\n<li>가상환경 종료</li>\n</ul>\n<pre class="bash"><code># on Windonws\nconda deactivate\n\n# on MAC, Linux\nsource deactivate</code></pre>\n<ul>\n<li>가상환경 삭제</li>\n</ul>\n<pre class="bash"><code>conda env remove -n env_name</code></pre>\n<ul>\n<li>현재 설치된 가상환경 보기</li>\n</ul>\n<pre class="bash"><code>conda env list</code></pre>\n<ul>\n<li>가상환경 파일로 내보내기</li>\n</ul>\n<pre class="bash"><code>conda env export &gt; environment.yaml</code></pre>\n<ul>\n<li>외부의 yaml 파일을 통해 가상환경 만들기</li>\n</ul>\n<pre class="bash"><code>conda env create -f environment.yaml</code></pre>\n<p>기본적인 conda 명령어에 대해 알아봤습니다. 그 이외의 명령어는 <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/cheatsheet.html">conda cheat sheet</a>를참고하시기 바랍니다.</p>\n<p>아래는 Conda에 관한 오해에 대한 아티클입니다. 원문은 굉장히 긴데 큼직한 몇개만 옮겨 적었습니다. 재미삼아 읽어보셔도 좋습니다. :)</p>\n<h3 id="conda-myths-and-misconceptions">Conda: Myths and Misconceptions</h3>\n<p><a href="https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/">(Reference2)</a></p>\n<p><strong>Myth #1: Conda는 패키지 매니저가 아니라 배포판(distribution)이다?</strong></p>\n<p>Conda는 패키지 매니저이고, Anaconda는 배포판입니다. Conda가 Anaconda에 패키징되어있긴 합니다만, 둘은 서로 다른 목적을 가진 별개의 것입니다.</p>\n<p><strong>Myth #2: Conda는 Python 패키지 매니저다? </strong></p>\n<p>Conda는 범용적인 패키지 매니저입니다. Python 패키지들이 주로 사용되긴 하지만 모든 언어에서 사용가능한 패키지 매니저입니다.</p>\n<p><strong>Myth #3: Conda와 pip는 직접적인 경쟁자다?</strong></p>\n<p>pip (<strong>P</strong>ip <strong>I</strong>nstalls <strong>P</strong>ackages)는 Python의 공식 패키지 매니저입니다. Conda와 pip는 서로 다른 목적을 가졌습니다. 다만, <u>독립된 환경에 Python 패키지를 설치하는데에 있어서만</u> 경쟁자입니다. 말이 좀 이상하지만, 독립된 환경에서 Python 패키지를 설치하는데에는 Conda와 pip 둘 다 쓸 수 있다는 뜻입니다. 구분을 하자면, pip는 어떠한 환경에서나 Python 패키지를 설치할 수 있고 (only Python packages within <em>any</em> environment), conda는 conda 환경에서 어떠한 패키지나 설치할 수 있습니다. (<em>any</em> package within conda environment)</p>\n<p><strong>Myth #4: Conda는 가상환경에서 작동하지 않는다? </strong></p>\n<p>몇개의 Conda 패키지는 가상환경에서 설치할 수 있습니다. 다만 Conda 고유의 환경 매니저를 사용하는 것이 더 좋습니다.</p>\n<p><strong>Myth #5: Conda는 open source가 아니다?</strong></p>\n<p>Conda는 100% open source입니다. Anaconda도 거의 open source입니다.</p>\n<p><strong>Myth #6: Conda 패키지 자체는 closed source이다?</strong></p>\n<p>Conda 채널은 완전히 open되어 있지는 않습니다. Conda 패키지와 배포판을 완전 오픈하기 위한 커뮤니티를 구성하고자 노력하고 있습니다.</p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/03/20/data-installAnaconda/",date:"2019/03/20"},{title:"Data Analyst NanoDgree",author:'Data Analyst NanoDgree (DAND)</h3>\n<p>데이터 분석 공부를 체계적으로 하고 싶어 여러 사이트 및 학원을 알아봤습니다. 패스트캠퍼스 같은 오프라인 교육부터 코세라, 유데미, 유다시티, K-MOOC와 같은 온라인 교육까지 꼼꼼히 비교를 해봤습니다. 우선 오프라인 교육은 단기 교육이 많습니다. 키포인트 위주로 배울 뿐이지 많은 양을 체계적으로 학습할 수 있을 것 같진 않았습니다. K-MOOC는 사이트를 들어가자 마자 나왔습니다. 관리를 거의 안하고 있고, 컨텐츠도 퀄리티가... 코세라는 무료 강좌지만 교수가 한 강좌 전체를 강의하기 때문에 다양성 혹은 체계성이 부족할 것이라 생각했습니다. (물론 추후에 집중 심화 학습할 땐 상당히 유용할 것 같았습니다.) 유데미는 다양한 주제의 단기 과정이 많아 저의 취지와는 맞지 않았습니다.</p>\n<p>그래서 최종적으로 Udacity <a href="https://www.udacity.com/">(reference1)</a> 를 선택했습니다. 커리큘럼이 체계적이었고, 이론과 프로젝트를 병행하는 구성이었습니다. 3개월에 100만원이라는 적지 않은 금액이었지만 퀄리티가 좋아보여 질렀습니다. 할 말이 조금 더 있는데 더 말하면 광고하는 것 같아서 그만하겠습니다.</p>\n<p>블로그 프로젝트와 마찬가지로 공부하면서 정리한 내용을 차례대로 올리겠습니다.</p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/03/17/data-DAND/",date:"2019/03/17"},{title:"BLOG - 16. 라우팅",author:'라우팅이란?</h3>\n<p>라우팅(routing)이란 네트워크 안에서 통신 데이터를 보낼 경로를 선택하는 과정입니다. <a href="https://ko.wikipedia.org/wiki/%EB%9D%BC%EC%9A%B0%ED%8C%85">(Reference1)</a> 예를 들어보겠습니다. 서울에서 부산까지 가는 길은 여러 개가 있습니다. &quot;그중 이 경로를 통해서 서울에서 부산까지 가라!&quot;라고 지정해주는 것이 라우팅입니다. 마찬가지로 블로그에는 여러 메뉴바가 있을 겁니다. 이 메뉴바를 클릭하면 이 페이지로 가고, 저 메뉴바를 클릭하면 저 페이지로 가라! 라고 지정을 해주는 것입니다.</p>\n<h3 id="블로그에-라우팅-적용">블로그에 라우팅 적용</h3>\n<p>terrace 디렉토리에서 아래와 같이 vue-router를 설치해줍니다.</p>\n<pre class="bash"><code>npm install vue-router</code></pre>\n<p>frontend/home/src 디렉토리의 App.vue를 아래와 같이 수정합니다. 코드를 먼저 나열한 뒤 마지막에 설명하겠습니다.</p>\n<pre class="django"><code>&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;H1 class=&quot;blog-title&quot;&gt; Blog Example &lt;/H1&gt;\n    &lt;nav&gt;\n      &lt;router-link class=&quot;menu-bar&quot; to=&quot;/&quot;&gt;Home&lt;/router-link&gt;\n      &lt;router-link class=&quot;menu-bar&quot; to=&quot;/about/&quot;&gt;About&lt;/router-link&gt;\n      &lt;router-link class=&quot;menu-bar&quot; to=&quot;/blog/&quot;&gt;Blog&lt;/router-link&gt;\n    &lt;/nav&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Main from &#39;./components/Main.vue&#39;\nexport default {\n  name: &#39;app&#39;,\n  components: {\n    &#39;main&#39;: Main\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n#app {\n  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.menu-bar {\n  padding: 10px;\n}\n&lt;/style&gt;</code></pre>\n<p>이해를 도모하고자 App.vue 전체 소스코드를 적어드렸습니다. 여기서 routing과 관련된 부분은 아래와 같습니다.</p>\n<pre class="django"><code>    &lt;nav&gt;\n      &lt;router-link class=&quot;menu-bar&quot; to=&quot;/&quot;&gt;Home&lt;/router-link&gt;\n      &lt;router-link class=&quot;menu-bar&quot; to=&quot;/about/&quot;&gt;About&lt;/router-link&gt;\n      &lt;router-link class=&quot;menu-bar&quot; to=&quot;/blog/&quot;&gt;Blog&lt;/router-link&gt;\n    &lt;/nav&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;</code></pre>\n<p>기본적으로 router-link는 a태그로 렌더링이 됩니다. Home은 bkshin.com/으로, About은 bkshin.com/about/으로 Blog는 bkshin.com/blog/로 각각 라우팅이 됩니다.</p>\n<pre class="django"><code>&lt;router-view&gt;&lt;/router-view&gt;</code></pre>\n<p>는 현재 라우트에 맞는 컴포넌트를 렌더링 시켜줍니다. 즉, 이 코드가 있어야 화면에 router-link가 보인다는 것입니다.</p>\n<p>main.js는 아래와 같이 수정합니다.</p>\n<pre class="javascript"><code>import Vue from &#39;vue&#39;\nimport App from &#39;./App.vue&#39;\nimport router from &#39;./router.js&#39;\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  render: h =&gt; h(App),\n}).$mount(&#39;#app&#39;)</code></pre>\n<p>이 코드에 대해서 간단히 알아보겠습니다.</p>\n<pre class="js"><code>render: h =&gt; h(App)</code></pre>\n<pre class="js"><code>render: function (h) {\n    return h(App);\n}</code></pre>\n<p>위 두 코드는 같은 의미입니다. (ES6 &quot;fat arrow&quot; Syntax) 여기서 h는 <strong>hyperscript</strong>를 의미합니다.</p>\n<p><strong><em>Hyperscript itself stands for &quot;script that generates HTML structures&quot;</em></strong></p>\n<p>import로 가지고 온 App 컴포넌트를 h(App)에 넣어주면 되고, App.vue에서의 \'app\' 부분이 #app에 들어갑니다. app 컴포넌트를 마운트해준다는 뜻입니다. (이를 위해서는 vue lifecycle을 이해해야 합니다. <a href="https://kr.vuejs.org/v2/guide/instance.html">(Reference1)</a>) 또한 router를 import해서 Vue 객체 안에 넣어줌으로써 router를 사용할 수 있습니다.</p>\n<p>router.js라는 js파일을 만들어 아래 코드를 입력합니다.</p>\n<pre class="javascript"><code>import Vue from &#39;vue&#39;;\nimport Router from &#39;vue-router&#39;;\n\nimport Main from &#39;./components/Main.vue&#39;\nimport About from &#39;./components/About.vue&#39;\nimport Blog from &#39;./components/Blog.vue&#39;\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: &#39;/&#39;,\n      name: &#39;Main&#39;,\n      component: Main\n    },\n    {\n      path: &#39;/About&#39;,\n      name: &#39;About&#39;,\n      component: About\n    },\n    {\n      path: &#39;/Blog&#39;,\n      name: &#39;Blog&#39;,\n      component: Blog\n    }\n  ]\n});</code></pre>\n<p>앞서 설명드렸듯이 라우팅이란 경로를 지정해주는 작업이라 했습니다. 각 컴포넌트 (Main, About, Blog)별로 path를 지정해줍니다.</p>\n<p>이제, component 디렉토리안의 <code>Helloworld.vue</code>는 삭제해주시고, Main.vue, About.vue, Blog.vue를 만들어 줍니다.</p>\n<p>Main.vue</p>\n<pre class="django"><code>&lt;template&gt;\n  &lt;div class=&quot;main&quot;&gt;\n    &lt;p&gt;This is Main Page!&lt;/p&gt;\n    &lt;img alt=&quot;Vue log&quot; src=&quot;../assets/logo.png&quot;&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;main&#39;,\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n&lt;/style&gt;</code></pre>\n<p>About.vue</p>\n<pre class="django"><code>&lt;template&gt;\n  &lt;div class=&quot;about&quot;&gt;\n    &lt;p&gt;This is About Page!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;about&#39;,\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n&lt;/style&gt;</code></pre>\n<p>Blog.vue</p>\n<pre class="django"><code>&lt;template&gt;\n  &lt;div class=&quot;blog&quot;&gt;\n    &lt;p&gt;This is blog Page!&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;blog&#39;,\n}\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n&lt;/style&gt;</code></pre>\n<p>간단히 테스트를 하기 위해서는 home 디렉토리에서 <code>npm run serve</code>를 해서 localhost로 접속해 확인해주고, 원하는 결과가 나오면 최종적으로 빌드하고 배포하시면 됩니다.</p>\n<p>확인해보시면 아래와 같이 라우팅이 잘 되는 것을 볼 수 있습니다. 홈 버튼을 누르면 Main 컴포넌트가 소개 버튼을 누르면 About 컴포넌트가 책과 사유 버튼을 누르면 Blog 컴포넌트가 정상적으로 렌더링됩니다.</p>\n<figure>\n<img src="http://cdn.bkshin.com/devRecord/2019/03/10/16_1.PNG" alt="routing sample 화면" /><figcaption>routing sample 화면</figcaption>\n</figure>\n<p>개념 설명을 하기 위한 예시 블로그이므로 디자인 작업은 하지 않았으니 원리 이해에만 참고하시기 바랍니다.</p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/03/10/blog-routing/",date:"2019/03/10"},{title:"BLOG - 15. 블로그 세팅 마무리",author:"myself",uri:"/devRecordBlog/2019/03/03/blog-blogSettingFinish/",date:"2019/03/03"},{title:"BLOG - 14. S3 배포 및 Redirect",author:"지금까지 로컬의 작업물을 EC2로 올리는 방법을 배웠습니다. EC2보다는 S3가 더 저렴하므로 이를 S3로 옮겨보겠습니다. 그전에 도메인을 하나 구매해보겠습니다. name cheap 사이트에 들어가 각자가 원하는 도메인 주소를 구매한 뒤 도메인과 ip를 연결해봅시다. 13.125.232.34를 bkshin.com과 연결을 하는 작업입니다. 이에 대해서는 간단한 구글링을 통해서도 알 수 있으므로 여기서 디테일하게 다루지는 않겠습니다. 도메인을 ip와 연결했다는 가정하에 진행하겠습니다.</p>\n<h3 id=\"s3-버킷-만들기\"><strong>S3 버킷 만들기</strong></h3>\n<p>우선, AWS S3 버킷을 만들어야 합니다. AWS S3에서 '버킷 만들기'를 누릅니다.</p>\n<ul>\n<li>이름 및 리전</li>\n</ul>\n<p>버킷 이름: bkshin.com (도메인 이름)</p>\n<ul>\n<li>옵션 구성</li>\n</ul>\n<p>Default 설정</p>\n<ul>\n<li>권한 설정<br /> 4개 체크 모두 해제</li>\n</ul>\n<p>S3 버킷을 만든 뒤 '속성'에 들어가 '정적 웹 호스팅'을 클릭합니다. '이 버킷을 사용하여 웹 사이트를 호스팅합니다.'를 누른 뒤 index.html을 적고 저장합니다.</p>\n<p><code>Hello, world!</code>가 적힌 index.html을 S3에 업로드 합니다. 이때 '권한설정'의 '퍼블릭 권한 관리'에서 '이 객체에 퍼블릭 읽기 액세스 권한을 부여함'을 선택합니다.</p>\n<h3 id=\"s3를-cloudfront로-접속하기\">S3를 Cloudfront로 접속하기</h3>\n<p>S3로 직접 접근하는 것보다 Cloudfront를 통해 S3로 접근하는 것이 더 저렴하기 때문에 Cloudfront를 이용하겠습니다. 우선 AWS Cloudfront에 들어갑니다. 'Create Distribution'을 클릭한 뒤 Web의 Get Started를 누릅니다.</p>\n<p>Origin Domain Name: bkshin.com.s3.amazonaws.com</p>\n<p>Restrict Bucket Access: Yes</p>\n<p>Origin Access Identity: Create a New Identity</p>\n<p>Grant Read Permissions on Bucket: Yes, Update Bucket Policy</p>\n<p>Distribution Settings의 Alternate Domain Names에는 bkshin.com을 입력해줍니다. SSL Certificate에서는 'Request or Import a Certificate with ACM'를 누릅니다. 도메인 이름은 'bkshin.com'으로 하고 다음을 누릅니다. DNS 검증을 클릭한 뒤 '확인 및 요청'을 누르면 '검증 보류'라고 뜰 겁니다. 도메인 왼쪽의 화살표를 클릭한 뒤 'Router 53에서 레코드 생성'을 클릭합니다.</p>\n<p>다시 Cloudfront Distribution Settings로 돌아와서 SSL Certificate에서 Custom SSL Certificate를 클릭합니다. 아래의 URL은 bkshin.com을 선택합니다. Default Root Object에는 index.html을 입력해줍니다. 이제 Create Distribution을 해줍니다.</p>\n<p>이제 Route 53에서 Create Record Set을 해준 뒤 Name은 실제 도메인 (bkshin.com), Type은 A-IPv4 address, Alias: Yes를 누른 뒤 바로 아래에는 Cloudfront distribution에서 ID를 클릭했을 때 나오는 Domain name을 입력합니다. 그 다음 Create을 클릭합니다. (현재 EC2랑 도메인이 연결되어있으면 중복이기 때문에 안됨)</p>\n<p>이제 도메인에 bkshin.com을 치고 들어가면 &quot;Hello, world!&quot;가 보일 겁니다. 이는 아까 S3에 넣어준 index.html 파일이 뜬 것입니다. 지금은 index.html만 들어있지만 web_root 디렉토리 전체를 넣어주어 S3에 블로그를 띄울 것입니다.</p>\n<p><strong><참고!></strong> EC2서버도 살려두기 위해서는 live.bkshin.com은 EC2, 서버, bkshin.com은 S3로 연결하면 됩니다. Route53에서 새로운 Record를 생성하고 (Create Record Set) NAme에 live.bkshin.com으로 설정하고 Alias는 Yes, Value에는 EC2 IP 주소를 넣어주고 저장하면 됩니다. 그럼 현재 상태에서는 live.bkshin.com으로 들어가면 블로그가 뜰 것이고, bkshin.com으로 들어가면 &quot;Hello, world!&quot;가 뜰 것입니다. 또한, www.bkshin.com도 bkshin.com과 같이 추가해주면 좋습니다. bkshin.com과 www.bkshin.com 모두 S3를 통해 웹페이지를 띄웁니다. 이를 위해서는 bkshin.com을 위한 S3 버킷과 www.bkshin.com을 위한 S3 버킷을 각각 만들어야 합니다.</p>\n<h3 id=\"aws-iam-생성\">AWS IAM 생성</h3>\n<p>IAM이란 Identity and Access Management의 약자로 AWS에 안전하게 접근하게 해줍니다. AWS 계정을 처음 만들면 메일주소와 비밀번호로 되어있는 루트 사용자가 만들어집니다. 모든 AWS 서비스를 이 루트 사용자로 이용하게 됩니다. AWS 가이드에서는 아주 간단한 작업에서 조차 루트 사용자를 사용하지 말라고 권장합니다. 따라서 IAM을 통해 AWS에 안전하게 접근하도록 할 것입니다. <a href=\"https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/introduction.html\">(Referecne1)</a></p>\n<p>우선, AWS IAM 사용자를 추가해줍니다. (사용자 이름 입력, 액세스 유형: 프로그래밍 방식 엑세스 선택, 기존 정책 직접 연결에서 CloudfrontFullAccess와 AmazonS3FullAccess 선택) 사용자를 만들어주면 액세스 키 ID와 비밀 액세스 키가 생성됩니다.</p>\n<h3 id=\"shell-script를-활용한-s3-deploy\">Shell Script를 활용한 S3 Deploy</h3>\n<p>이제, Shell Script를 활용하여 로컬의 작업물을 S3로 자동 Deploy할 것입니다. 우선, Terrace 디렉토리에서 <code>deploy_to_S3.sh</code>를 만든 뒤 아래와 같이 붙여넣습니다.</p>\n<pre class=\"bash\"><code># Deploy to S3\ns3deploy -bucket bkshin.com -key ******** -secret *********** -region ap-northeast-2 -source web_root -v\n# aws s3 cp web_root s3://bkshin.com/ --recursive\n\n# Invalidate Cloudfront\naws cloudfront create-invalidation --distribution-id ******* \\\n--paths /\\*</code></pre>\n<p>위 코드에서 <code>-key</code>와 <code>- secret</code> 옆의 ***** 부분에는 아까 IAM 사용자 추가할 때 만들어준 액세스키 ID와 비밀 액세스 키를 넣습니다. <code>--distribution-id</code> 에는 AWS Cloudfront에 있는 Distribution ID를 넣어주시면 됩니다.</p>\n<p><strong>여기서 주의할 점은 deploy_to_S3.sh를 .gitignore에 추가해 github로 push가 되지 않도록 하는 것입니다.</strong> github으로 푸쉬가 되면 액세스 ID와 비밀 키가 commit 이력에 남아서 S3를 삭제하고 다시 만들어줘야할 수도 있습니다. 실수로 deploy_to_S3.sh를 github에 push했는데, AWS에서 친절하게 경고 메일이 왔습니다. 해당 key를 가진 S3를 삭제하고, AWS 비번을 바꾸라고요.. 그렇게 해주니 안내한대로 잘 해줘서 고맙다는 메일까지 왔습니다. <strong>역시 갓아마존..</strong></p>\n<p>이제, temp 디렉토리에 AWS CLI를 설치합니다.</p>\n<pre class=\"bash\"><code>pip install awscli</code></pre>\n<p>그 다음, terrace 디렉토리에 s3deploy를 설치해줍니다.</p>\n<pre class=\"bash\"><code>go get -u -v github.com/bep/s3deploy</code></pre>\n<p>s3deploy를 사용하기 위해서는 go/src 디렉토리에서 go build를 한 뒤 s3deploy 실행파일을 /usr/local/bin으로 옮겨야 합니다. 이는 s3deploy라는 실행파일을 어디서든 사용하기 위해서 입니다.</p>\n<pre class=\"bash\"><code>cd\ncd go/src/github.com/bep/s3deploy\ngo build\nsudo mv s3deploy /usr/local/bin</code></pre>\n<p>이제 terrace 디렉토리로 돌아와 <code>./deploy_to_S3.sh</code>를 해주면 S3로 배포가 됩니다. 아까 live.bkshin.com도 설정해주었다면 이는 EC2로 연결된 것이고 bkshin.com은 S3로 연결된 것입니다. www.bkshin.com까지 추가해줬다면 shell script에 www.bkshin.com을 위한 코드도 동일하게 추가해줍니다.</p>\n<h3 id=\"https로-redirect하기\">HTTPS로 Redirect하기</h3>\n<p><a href=\"https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:621073008195:applications~standard-redirects-for-cloudfront\">(Reference2)</a> 본 링크로 들어가서 Deploy를 클릭합니다. 그 다음 맨 아래의 배포를 누릅니다. AWS IAM의 역할에 들어가 serverlessrepo를 누릅니다. 신뢰관계에서 신뢰관계 편집을 누른 뒤 Reference2에 있는 아래 코드를 그대로 붙여넣은 후 저장합니다.</p>\n<pre><code>{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Principal&quot;: {\n        &quot;Service&quot;: [\n          &quot;lambda.amazonaws.com&quot;,\n          &quot;edgelambda.amazonaws.com&quot;\n        ]\n      },\n      &quot;Action&quot;: &quot;sts:AssumeRole&quot;\n    }\n  ]\n}</code></pre>\n<p>Cloudformation에서 serverlessrepo를 클릭한 후 출력에서 값을 그대로 복사합니다. Cloudfront Distribution 선택 후 Behaviors에서 Edit을 누른 뒤 Viewer Protocol Policy에서 Redirect HTTP to HTTPS를 선택합니다. 맨 아래 Lambda Function Associations에서 Viewer Request를 선택한 후 Lambda Function ARN에 방금 복사한 값을 그대로 붙여넣습니다. Yes, Edit을 클릭합니다.</p>\n<p>이제 인터넷 주소창에 bkshin.com을 치면 자동으로 https로 리다이렉션이 됩니다 !!</p>\n<p><br></p>\n<h2 id=\"reference\">Reference",uri:"/devRecordBlog/2019/02/25/blog-s3DeployRedirect/",date:"2019/02/25"},{title:"BLOG - 13. 서버 시작프로그램",author:"myself",uri:"/devRecordBlog/2019/02/24/blog-serverStart/",date:"2019/02/24"},{title:"BLOG - 12. EC2 git Hook 설정",author:'<strong>AWS EC2 인스턴스 생성</strong></h3>\n<p>블로그 서비스를 구현하기 위해서는 서버가 필요합니다. 여기서는 AWS EC2를 활용할 것입니다. AWS EC2가 무엇인지는 본 링크를 참고하시기 바랍니다. <a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/concepts.html">(Reference1)</a> 쉽게 말하자면 EC2는 가상의 컴퓨팅 파워를 제공합니다. 어떤 프로그램을 돌리기 위해서는 컴퓨터가 필요합니다. (<em>당연한 말이지만..</em>) 언제 어디서든 블로그에 접속하기 위해서는 24시간 돌아가는 컴퓨터 (서버)가 필요하며, 이 컴퓨터(서버)에 블로그 서비스가 구축되어 있어야 합니다. 이를 위해 물리적인 서버 컴퓨터를 활용할 수도 있지만 비쌉니다. 저렴한 가격에 물리적인 제약없이도 컴퓨팅 파워를 제공받을 수 있는 곳이 바로 AWS입니다. AWS에는 다양한 서비스가 있지만 그 중 EC2를 활용할 것입니다. (추후에는 S3도 사용할 예정입니다.)</p>\n<p>우선, aws.amazon.com에 접속해 AWS 계정을 생성한 뒤 EC2 인스턴스를 생성합니다. 이때 리전은 서울로 설정해야합니다. 인스턴스 생성시 아래 사항 순으로 선택합니다.</p>\n<ol type="1">\n<li>AMI선택: Amazon Linux Amazon Linux 2 AMI (HVM), SSD Volume Type<br /></li>\n<li>인스턴스 유형 선택: t2 micro (프리 티어 사용 가능)<br /></li>\n<li>(인스턴스 구성 ~ 태그 추가까지는 그냥 넘어가고)<br /></li>\n<li>보안 그룹 구성: 규칙 추가를 눌러 HTTP, HTTPS, SSH를 추가해줍니다. (HTTP 포트는 80, 소스는 default 값인 0.0.0.0/0, ::/0, HTTPS 포트는 443, 소스는 default 값인 0.0.0.0/0, ::/0, SSH 포트는 22, 소스는 default 값인 0.0.0.0/0, ::/0)<br /></li>\n<li>새 키 페어 생성 및 키 페어 다운로드 후 인스턴스 시작을 합니다. (키 페이 이름은 알아서 정하면 되고, 저는 temp.pem으로 생성했습니다.)</li>\n</ol>\n<h3 id="putty로-ec2-인스턴스에-접속">PuTTY로 EC2 인스턴스에 접속</h3>\n<p>.ssh 디렉토리에 키페어를 저장해두고 그 키페어를 이용해서 EC2 인스턴스에 접속할 것입니다. 홈 디렉토리에서</p>\n<pre class="bash"><code>chmod 700 .ssh\ncd .ssh\nv temp.pem # 각자의 키페어 이름으로</code></pre>\n<p>temp.pem에 아까 다운받았던 키페어를 그대로 복사 붙여넣기 합니다. 내 PC에 있는 temp.pem을 그냥 열면 열리지 않기 때문에 Visual Studio Code나 메모장 등으로 열어서 전체를 복사 붙여넣기 하면 됩니다. 키페어는 <code>-----BEGIN RSA PRIVATE KEY-----</code> 로 시작하는 부분부터 끝까지 전체를 그대로 복사해야합니다. 한글자라도 틀리거나 스페이스라도 틀리면 인식을 못합니다.</p>\n<p>키페어의 권한도 변경합니다.</p>\n<pre class="bash"><code>chmod 400 temp.pem</code></pre>\n<p>다시 홈 디렉토리로 가서 ec2로 접속을 합니다.</p>\n<pre class="bash"><code>ssh ec2-user@13.125.232.34 -i ~/.ssh/temp.pem</code></pre>\n<p><span class="citation" data-cites="뒤의">@뒤의</span> IP 주소는 EC2인스턴스 창 하단에 IPv4 퍼블릭 IP에서 볼 수 있습니다. \'내가 만든 AWS EC2 인스턴스 IP에 ssh로 접속하는데 키페어는 temp.pem을 사용하겠다\'라는 뜻입니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/02/18/12_1.PNG" alt="AWS EC2 접속" /><figcaption>AWS EC2 접속</figcaption>\n</figure>\n<p>이런 화면이 뜨면 정상적으로 접속이 된 겁니다.</p>\n<h3 id="ec2-git-계정-생성">EC2 git 계정 생성</h3>\n<p>AWS EC2 git 계정을 생성해보겠습니다. <code>useradd</code>를 통해 새로운 계정을 생성해줄 수 있습니다. <a href="https://rootblog.tistory.com/2">(Reference2)</a></p>\n<pre class="bash"><code>sudo useradd -m -s /usr/bin/git-shell git\nsudo vi /etc/sudoers</code></pre>\n<p>sudoers에 NOPASSWD를 추가해줍니다. 이는 패스워드 없이 sudo를 쓸 수 있도록 합니다.</p>\n<pre class="bash"><code>git ALL=(ALL) NOPASSWD: ALL</code></pre>\n<pre class="bash"><code>sudo -u git bash</code></pre>\n<p>위 명령어는 bash로 git 계정에 들어가겠다는 뜻입니다. NOPASSWD 설정을 해줬기 때문에 패스워드 없이도 sudo가 작동합니다.</p>\n<p>그 다음, EC2 루트 계정에 있는 authorized_keys를 git 계정으로 옮깁니다.</p>\n<pre class="bash"><code>cd\nmkdir .ssh\nchmod 700 .ssh\ncd .ssh\nsudo cp /home/ec2-user/.ssh/authorized_keys .</code></pre>\n<h3 id="git-hook-설정">Git Hook 설정</h3>\n<p>이제 Git hook을 설정해줄 것입니다. Git hook은 Git 으로 어떤 이벤트가 push되면 특정 스크립트가 실행되도록 합니다. <a href="https://git-scm.com/book/ko/v1/Git%EB%A7%9E%EC%B6%A4-Git-%ED%9B%85">(Reference3)</a><br />terrace 디렉토리에서 <code>cd .git/hooks/</code>를 치면 여러 sample hook들이 보일 겁니다. 예를 들어 pre-commit은 커밋 직전에 실행되는 hook이라는 뜻입니다. .sample을 지워주면 바로 실행이 가능합니다. 각 hook들이 어떤 기능을 하는지는 <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">(Reference4)</a>를 참고해주시기 바랍니다.</p>\n<pre class="bash"><code>ls\ncd ..\nmkdir terrace_hook\ncd terrace_hook/\n# git 설치\nsudo yum -y install git\n# 워킹 디렉토리가 없는 빈 저장소\ngit init --bare\nls -al\ncd hooks</code></pre>\n<p><code>git init --bare</code>은 워킹 디렉토리가 없는 빈 저장소를 만듭니다. <a href="https://git-scm.com/book/ko/v1/Git-%EC%84%9C%EB%B2%84-%EC%84%9C%EB%B2%84%EC%97%90-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0">(Reference5)</a> hooks 디렉토리를 보면 hook과 관련된 각종 샘플을 볼 수 있습니다. 우리는 post-receive라는 hook을 새로 만들어 줄 것입니다.</p>\n<pre class="bash"><code>touch post-receive\n# post-receive에 실행 권한 추가\nchomod +x post-receive\nls -al\nvi post-receive</code></pre>\n<p>post-receive란 EC2 git push 후에 자동으로 실행되는 스크립트를 의미합니다. 본 프로젝트에서는 로컬의 작업물을 EC2 git으로 push하면 post-receive가 그 작업물을 빌드하고 서버를 재부팅해줄 것입니다. 아래 코드를 그대로 복사 붙여넣기 합니다.</p>\n<pre class="bash"><code># Application Name:\nexport DEPLOY_APP_NAME=`whoami`\n\n# This is the root deploy dir.\nexport DEPLOY_ROOT=&quot;${HOME}/terrace_deploy&quot;\n\n# When receiving a new git push, the received branch gets compared to this one.\n# If you do not need this, just add a comment\nexport DEPLOY_ALLOWED_BRANCH=&quot;master&quot;\n\n# You could use this to do a backup before updating to be able to do a quick rollback.\n# If you need this just delete the comment and modify to your needs\n#PRE_UPDATE_CMD=&#39;cd ${DEPLOY_ROOT} &amp;&amp; backup.sh&#39;\n\n# Use this to do update tasks and maybe service restarts\n# If you need this just delete the comment and modify to your needs\nPOST_UPDATE_CMD=&#39;cd ${DEPLOY_ROOT} &amp;&amp; make update&#39;\n\nPROJECT_NAME=&#39;terrace&#39;\nRESTART_CMD=&#39;sudo systemctl restart &quot;${PROJECT_NAME}.service&quot; &amp;&amp; sudo systemctl status &quot;${PROJECT_NAME}.service&quot;&#39;\n\n###########################################################################################\n\nexport GIT_DIR=&quot;$(cd $(dirname $(dirname $0));pwd)&quot;\nexport GIT_WORK_TREE=&quot;${DEPLOY_ROOT}&quot;\nIP=&quot;$(ip addr show eth0 | grep &#39;inet &#39; | cut -f2 | awk &#39;{ print $2}&#39;)&quot;\n\necho &quot;githook: $(date): Welcome to &#39;$(hostname -f)&#39; (${IP})&quot;\necho\n\n# Make sure directory exists. Maybe its deployed for the first time.\nmkdir -p &quot;${DEPLOY_ROOT}&quot;\n\n# Loop, because it is possible to push more than one branch at a time. (git push --all)\nwhile read oldrev newrev refname\ndo\n\n    export DEPLOY_BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)\n    export DEPLOY_OLDREV=&quot;$oldrev&quot;\n    export DEPLOY_NEWREV=&quot;$newrev&quot;\n    export DEPLOY_REFNAME=&quot;$refname&quot;\n\n    if [ &quot;$DEPLOY_NEWREV&quot; = &quot;0000000000000000000000000000000000000000&quot; ]; then\n        echo &quot;githook: This ref has been deleted&quot;\n        exit 1\n    fi\n\n    if [ ! -z &quot;${DEPLOY_ALLOWED_BRANCH}&quot; ]; then\n        if [ &quot;${DEPLOY_ALLOWED_BRANCH}&quot; != &quot;$DEPLOY_BRANCH&quot; ]; then\n            echo &quot;githook: Branch &#39;$DEPLOY_BRANCH&#39; of &#39;${DEPLOY_APP_NAME}&#39; application will not be deployed. Exiting.&quot;\n            exit 1\n        fi\n    fi\n\n    if [ ! -z &quot;${PRE_UPDATE_CMD}&quot; ]; then\n       echo\n       echo &quot;githook: PRE UPDATE (CMD: &#39;${PRE_UPDATE_CMD}&#39;):&quot;\n       eval $PRE_UPDATE_CMD || exit 1\n    fi\n\n    # Make sure GIT_DIR and GIT_WORK_TREE is correctly set and &#39;export&#39;ed. Otherwhise\n    # these two environment variables could also be passed as parameters to the git cli\n    echo &quot;githook: I will deploy &#39;${DEPLOY_BRANCH}&#39; branch of the &#39;${DEPLOY_APP_NAME}&#39; project to &#39;${DEPLOY_ROOT}&#39;&quot;\n    git checkout -f &quot;${DEPLOY_BRANCH}&quot; || exit 1\n    git reset --hard &quot;$DEPLOY_NEWREV&quot; || exit 1\n\n    if [ ! -z &quot;${POST_UPDATE_CMD}&quot; ]; then\n       echo\n       echo &quot;githook: POST UPDATE (CMD: &#39;${POST_UPDATE_CMD}&#39;):&quot;\n       eval $POST_UPDATE_CMD || exit 1\n    fi\n\n    if [ ! -z &quot;${RESTART_CMD}&quot; ]; then\n       echo\n       echo &quot;githook: RESTART UPDATE (CMD: &#39;${RESTART_CMD}&#39;):&quot;\n       eval $RESTART_CMD || exit 1\n    fi\n\ndone\n\necho\necho &quot;githook: $(date): See you soon at &#39;$(hostname -f)&#39; (${IP})&quot;\nexit 0</code></pre>\n<p>위 코드를 저장한 후에 bash 창에서 아래와 같이 로그아웃해 로컬 계정으로 갑니다.</p>\n<pre class="bash"><code>exit\nlogout\n# 로컬 계정에서\ncd .ssh\nv config</code></pre>\n<p>config 파일에 아래 코드를 넣어줍니다.</p>\n<pre class="bash"><code>Host 13.125.232.34\n    HostName 13.125.232.34\n        IdentityFile ~/.ssh/temp.pem</code></pre>\n<p>IP 주소 및 키페어는 개별 EC2 IP 및 키페어를 넣어주면 됩니다. 그 다음 권한을변경해줍니다.</p>\n<pre class="bash"><code>chmod 600 config</code></pre>\n<p>이제는 <code>ssh ec2-user@13.125.232.34</code>만 해도 EC2로 접속이 됩니다. 설정해주기 전에는 <code>ssh ec2-user@13.125.232.34 -i ~/.ssh/temp.pem</code>을 통해 접속을 했는데 훨씬 간단해졌습니다.</p>\n<p><br></p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/02/18/blog-ec2GitHook/",date:"2019/02/18"},{title:"BLOG - 11. Github 연결",author:'지금까지 블로그 기본 뼈때를 만들고 빌드까지 했습니다. 추후에는 AWS를 통해서 블로그를 띄울 겁니다. 그에 앞서 본 챕터에서는 github에 연결하는 방법에 대해 배워볼 것입니다. github 연결법을 이미 알고 계신 분은 다음 챕터로 넘어가셔도 됩니다.</p>\n<h3 id="github"><strong>Github</strong></h3>\n<p>우선 git은 github을 이용할 것입니다. github에 repository를 하나 생성합니다. terrace 디렉토리에서는 <code>.gitignore</code>에 <code>bin</code>을 추가해줍니다. <code>.gitignore</code>에 있는 디렉토리 혹은 파일은 git의 영향을 받지 않습니다.</p>\n<p>추가로 home 디렉토리 안에서 .gitignore에 아래 파일 및 폴더를 지정해줍니다.</p>\n<pre><code>.DS_Store\nnode_modules\n/dist\n\n# local env files\n.env.local\n.env.*.local\n\n# Log files\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Editor directories and files\n.idea\n.vscode\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw*</code></pre>\n<p>이제 git을 만들어줍니다.</p>\n<pre class="bash"><code>git init\ngit config --global user.name &quot;bkshin&quot;\ngit config --global user.email &quot;werooring@gmail.com&quot;\ngit add -A\ngit commit</code></pre>\n<p>커밋 메시지는 <code>firtst commit</code>이라고 찍습니다. 다만 그 이후 commit은 <a href="https://www.huskyhoochu.com/issue-based-version-control-101">(Reference1)</a>을 참고해서 작성하면 됩니다. 이론편뿐만 아니라 실전편까지 봐야합니다.</p>\n<pre class="bash"><code>git remote add origin git@github.com:BaekKyunShin/Terrace_example.git\ngit push -u origin master</code></pre>\n<p>이렇게 하면 publickey가 없다고 permission denied가 뜰 겁니다. git@github.com~ 부분이 SSH 주소입니다. Git SSH 공개키를 만들어야 push를 할 수 있습니다.</p>\n<pre class="bash"><code>ssh-keygen</code></pre>\n<p>을 해주고 passphrase 만 두번 입력해줍니다. 맨 처음 나오는 \'Enter file in which to save the key\'는 무시하고 엔터만 쳐도 됩니다. <code>~/.ssh</code> 디렉토리에서 id_rsa.pub가 생성된 걸 볼 수 있습니다. 이것이 publickey입니다. <a href="https://git-scm.com/book/ko/v1/Git-%EC%84%9C%EB%B2%84-SSH-%EA%B3%B5%EA%B0%9C%ED%82%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0">(Reference2)</a></p>\n<pre class="bash"><code>cat ~/.ssh/id_rsa.pub</code></pre>\n<p>를 치면 ssh-rsa로 시작하는 publickey가 나올 것입니다. 이것을 그대로 복사합니다. github 맨 오른쪽 위 메뉴를 클릭하고 settings을 누릅니다. 왼쪽 personal settings에서 SSH and GPG Keys를 누릅니다. New SSH Key를 클릭한 뒤 title을 자유롭게 설정하고 아래 Key에 방금 복사한 publickey 내용을 그대로 붙여넣기 한 뒤 저장합니다.<br />publickey를 등록했으니 이제 github으로 push 해봅시다.</p>\n<pre class="bash"><code>git push -u origin master</code></pre>\n<p>passphrase를 치면 정상적으로 push가 되는 것을 볼 수 있습니다. 여기서 bin 디렉토리가 push되었다면 잘못된 것입니다. bin은 .gitinore에 추가가 되어있어야 하며 정상적으로 추가되었다면 bin은 push가 안 됩니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/02/17/11_1.PNG" alt="github Repository" /><figcaption>github Repository</figcaption>\n</figure>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/02/17/blog-githubPush/",date:"2019/02/17"},{title:"BLOG - 10. Shell Script, Makefile",author:'<strong>Shell Script를 활용한 npm 빌드</strong></h3>\n<p>홈 디렉토리에서</p>\n<pre class="bash"><code>cd terrace/frontend\nvi update.sh</code></pre>\n<p>update.sh에 아래 코드를 추가하고 저장해줍니다.</p>\n<pre class="bash"><code>cd home\nnpm run build\nrm –rf ../../web_root\ncp –r dist ../../web_root</code></pre>\n<p>위 코드는 home 디렉토리로 들어가 빌드를 해준 뒤 기존의 web_root 디렉토리를 삭제해주고 빌드의 결과물이 담기는 dist 디렉토리를 다시 web_root로 카피하는 명령어입니다. 여기서 sh 파일은 shell script 파일입니다. shell script란 line by line의 코드를 자동으로 실행해주는 프로그램입니다. 즉, <code>./update.sh</code>를 해줘서 shell script를 실행해주면 위 4줄의 코드를 순차적으로 자동 실행됩니다. 여러 줄의 코드를 일일이 입력하는 게 번거로울 때 유용합니다. 이제 frontend 디렉토리에 있는 update.sh를 실행해보겠습니다.</p>\n<pre class="bash"><code>./update.sh</code></pre>\n<p>permission denied가 뜰 겁니다. 권한 설정을 안 해줘서 그렇습니다. 아래와 같이 권한 설정을 변경합니다.</p>\n<pre class="bash"><code>chmod 755 update.sh</code></pre>\n<p>이제 <code>./update.sh</code>를 하면 자동으로 빌드가 되고 빌드 결과물이 web_root에 담길 겁니다.</p>\n<h3 id="makefile를-활용한-루트-핸들러-빌드">Makefile를 활용한 루트 핸들러 빌드</h3>\n<p>Makefile은 shell script랑 비슷한 개념으로 보면 됩니다. 다만, Makefile은 변경된 사항만 반영해서 빠르게 실행을 해줍니다. 굉장히 많은 소스코드가 있다고 할 때 그 모든 코드를 하나 하나 컴파일 하려면 시간이 꽤 많이 들 것입니다. 변경된 소스코드만 알아서 컴파일 해준다면 훨씬 빠를 겁니다. 이럴 때 Makefile을 사용하는 것입니다. 아래는 Makefile 강좌에서 퍼온 make 유틸의 목적을 설명하는 글입니다. (20년도 더 된 강좌인데 수학의 정석, 성문 영어 같은 느낌이네요..)</p>\n<p><strong>The purpose of the <em>make</em> utility is to determine automatically which pieces of a large program need to be recompiled, and issue the commands to recompile them.</strong> <a href="https://wiki.kldp.org/KoreanDoc/html/GNU-Make/GNU-Make-1.html">(Reference1)</a></p>\n<p><code>npm run serve</code>에도 Makefile 개념이 있다고 보면 되는데, 처음 <code>npm run serve</code>를 할 땐 시간이 오래 걸리지만 한번 실행된 뒤에 변경 사항을 반영하는 것은 빠르게 처리됩니다.<br /><br> 이제, terrace 디렉토리에서 Makefile을 만들어줍니다.</p>\n<pre class="bash"><code>vi Makefile</code></pre>\n<pre class="makefile"><code>run:\n    ./bin/terrace\n\nbuild:\n    go build -x -o ./bin/terrace ./src\n    sudo setcap CAP_NET_BIND_SERVICE=+eip ./bin/terrace</code></pre>\n<p>위 Makefile의 의미는 <code>make run</code> 을 하면 <code>./bin/terrace</code>가 실행되고, <code>make build</code>를 하면 아래 두 줄이 실행된다는 것입니다. 인자를 아무것도 안주고 <code>make</code>만 하면 맨 위에 있는 <code>make run</code>을 실행합니다. 위 코드를 그대로 복사 붙여넣기 하면 Makefile이 실행 안 될 수도 있습니다. Makefile에서 실행되는 코드는 반드시 TAB을 해줘야하는데 그대로 복사 붙여넣기 하면 TAB이 아니라 띄어쓰기로 인식할 수 있기 때문입니다. 반드시 ./bin/terrace 왼쪽 부분과 build: 아랫줄은 TAB을 해줘야 합니다.<br /><br></p>\n<pre class="makefile"><code>go build -x -o ./bin/terrace ./src</code></pre>\n<p>이 부분에서 -x는 build하는 과정에 대한 설명을 자세히 보여달라는 것입니다. -o는 output의 약자입니다. build 결과물인 실행 파일을 ./bin/terrace로 저장해달라는 것이고, ./src는 src 디렉토리에 있는 go 소스코드 (루트 핸들러가 들어 있는 main.go)를 읽어오는 부분입니다.</p>\n<p>즉, src 디렉토리의 main.go를 빌드해서 ./bin/terrace 로 저장하라는 뜻입니다. 여기서는 <code>make run</code>하기 전에 <code>make build</code>부터 해줘야 합니다. 이전 글에서 설명한 것처럼 sudo 권한 없이 ./bin/terrace를 실행하기 위해서는 <code>sudo setcap CAP_NET_BIND_SERVICE=+eip ./bin/terrace</code>을 해줘야 하기 때문입니다.</p>\n<h3 id="최종-디렉토리-구성">최종 디렉토리 구성</h3>\n<p>최종적인 Project Directory는 아래와 같습니다.</p>\n<p><strong>- terrace</strong></p>\n<p><strong>    - bin</strong></p>\n<p><strong>    - src</strong></p>\n<p><strong>    - frontend</strong></p>\n<p><strong>        - home</strong></p>\n<p><strong>            - dist</strong></p>\n<p><strong>    - web_root</strong></p>\n<p>terrace는 project root이며 Makefile도 있습니다.<br />bin에는 루트 핸들러 실행 파일인 terrace가 있습니다.<br />src에는 루트 핸들러인 main.go 파일이 있습니다.<br />frontend 하위에 home이 있으며, npm 자동 빌드를 위한 update.sh도 있습니다.<br />home 하위에는 빌드 결과물이 담기는 dist 디렉토리가 있으며, 앞으로 작업할 프론트 파일들이 담길 것입니다.</p>\n<p>이제 로컬에서 해야할 기본적인 세팅은 끝났습니다. <br></p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/02/15/blog-shellMake/",date:"2019/02/15"},{title:"BLOG - 9. 웹서버 만든 후 빌드",author:'<strong>빌드하기</strong></h3>\n<p>vue로 만든 소스코드를 아래와 같이 빌드합니다.</p>\n<pre class="bash"><code>cd terrace/frontend/home\nnpm run build</code></pre>\n<p>빌드란 해당 프로그램을 테스트하고 검사하여 배포하기 위해 수행하는 행위의 집합이라고 생각하시면 됩니다. <a href="https://github.com/jinyowo/JS-Calendar/wiki/**-Build%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C">(Reference1)</a> 빌드의 결과물은 dist 디렉토리에 저장됩니다. 이를 배포를 위한 web_root 디렉토리로 카피하겠습니다.</p>\n<pre class="bash"><code>cp -r dist ../../web_root</code></pre>\n<h3 id="root-handler-만들기">Root Handler 만들기</h3>\n<pre class="bash"><code>cd ../../\nmkdir src\ncd src\nv main.go</code></pre>\n<p>src 디렉토리에 Root Handler 기능을 하는 main.go라는 파일을 만듭니다. main.go에 아래 코드를 그대로 붙여넣기 하시면 됩니다.</p>\n<pre class="go"><code>package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;io/ioutil&quot;\n    &quot;log&quot;\n    &quot;net/http&quot;\n)\n\nconst (\n  WebRoot = &quot;./web_root/&quot;\n)\n\nfunc rootHandler(w http.ResponseWriter, r *http.Request) {\n    // when request is root, send index.html\n    // otherwise, send the file\n\n    log.Println(r.URL.Path)\n\n    path := r.URL.Path[len(&quot;/&quot;):]\n\n    source, err := ioutil.ReadFile(WebRoot + path)\n    if err != nil {\n        source, err = ioutil.ReadFile(WebRoot + path + &quot;/index.html&quot;)\n        if err != nil {\n            // Redirect to 404 page\n            w.WriteHeader(http.StatusNotFound)\n            fmt.Fprint(w, err)\n            log.Println(&quot;(rootHandler) &quot;, err)\n            return\n        }\n    }\n\n    // Set content type as css if required file&#39;s extension is css\n    if len(path) &gt;= 4 &amp;&amp; path[len(path)-4:] == &quot;.css&quot; {\n        w.Header().Set(&quot;Content-Type&quot;, &quot;text/css&quot;)\n    }\n\n    fmt.Fprint(w, string(source))\n    log.Println(&quot;(rootHandler) The requested file has been sent: &quot;, WebRoot+path)\n}\n\nfunc main() {\n    http.HandleFunc(&quot;/&quot;, rootHandler)\n    log.Fatal(http.ListenAndServe(&quot;:80&quot;, nil))\n}</code></pre>\n<p>main.go를 간단히 설명드리겠습니다. 예를 들어, <code>r.URL.Path</code> = &quot;/bookThinkBlog/2018/12/28/book-sapiens/&quot; 입니다. r은 클라이언트의 request (클라이언트에서 서버로 보내온 정보들)를 뜻하는 것입니다.</p>\n<p><code>path := r.URL.Path[len(&quot;/&quot;):]</code> 이 코드를 지나면 <code>path</code>= &quot;bookThinkBlog/2018/12/28/book-sapiens/&quot; 이렇게 맨 앞 &quot;/&quot; 가 없어집니다.</p>\n<p><code>source</code>= &quot;./web_root/bookThinkBlog/2018/12/28/book-sapiens/&quot; 가 될 것입니다. err가 없다면 바로 아래의 조건문은 건너뛸 것이고, err가 있다면 <code>source</code>=&quot;./web_root/bookThinkBlog/2018/12/28/book-sapiens/index.html&quot;이 될 것입니다. 이것마저 err가 있다면 404(Not Found)를 띄워주는 겁니다.</p>\n<p>아무 err가 없다면 <code>fmt.Fprint(w, string(source))</code> 가 정상적으로 실행됩니다. Fprint는 파일에 쓰기 위한 용도이며, <code>string(source)</code>를 <code>w</code>에 써준다라는 의미입니다. <a href="http://brownbears.tistory.com/175">(Reference2)</a> <code>http.HandleFunc</code>는 지정된 Path에 대해서 어떤 Request 핸들러를 사용할지를 지정해줍니다. 위 코드에서는 &quot;/&quot; Path에 대해 rootHandler 함수를 실행해준다는 뜻입니다. <code>http.ListenAndServe</code>는 80번 포트를 열고 클라언트의 request를 받아들여 새로운 Go 루틴에 작업을 할당해줍니다. 두번째 파라미터인 nil은 Default인 HTTP Request router를 사용한다는 뜻입니다. <a href="http://golang.site/go/article/111-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9B%B9-%EC%84%9C%EB%B2%84-HTTP-%EC%84%9C%EB%B2%84">(Reference3)</a></p>\n<p>사실 main.go에 있는 function 하나 하나가 굉장히 추상화가 되어있습니다. 그렇기에 그냥 블랙박스라 생각하시고 어떤 기능을 하는지만 이해하셔도 무방할 것 같습니다. 브리핑을 해보자면, 유저가 URL 주소를 치면 웹 서버에 request를 보냅니다. 그 request를 받아 rootHandler를 돌려 source path를 responsewriter에 써주고 그 response를 사용자 브라우저에 띄워주는 것입니다.</p>\n<h3 id="main.go-빌드하기">main.go 빌드하기</h3>\n<p>main.go가 있는 src 디렉토리에서 go build를 해줍니다.</p>\n<pre class="bash"><code>go build main.go</code></pre>\n<p>그러면 결과물로 <code>main</code>이라는 실행 파일이 하나 생길 겁니다. 아래와 같이 몇 가지 조정을 하겠습니다.</p>\n<pre class="bash"><code>cd ..\nmv src/main .\nmkdir bin\nmv main bin\ncd bin\nmv main terrace\ncd ..</code></pre>\n<p>이제 terrace/bin 디렉토리에 terrace라는 go 파일이 담겨 있을 겁니다.</p>\n<pre class="bash"><code>sudo ./bin/terrace </code></pre>\n<p>이렇게 하면 npm run serve 한 것과 같이 웹 서버를 띄울 수 있습니다. 다만 npm run serve는 8080포트지만, 위에 있는 main.go를 보면 80포트에서 listen을 하고 있기 때문에 localhost:8001을 해야 접속이 됩니다. (각자 포트포워딩 했던 포트로 들어가시면 됩니다.) terrace를 실행할 때 sudo를 붙이는 이유는 80이 low number port이기 때문입니다. (참고로 http는 80번 포트, https는 443번 포트, ssh는 22번 포트를 씁니다.)</p>\n<p>하지만, 매번 실행할 때마다 sudo를 붙인다면 해킹당할 시 모든 걸 잃을 수 있습니다. sudo로 실행한 것을 뺏기면 root 계정을 뺏긴 것이니까요. 그래서 아래와 같이 설정해주면 sudo를 붙이지 않아도 <code>./bin/terrace</code>가 실행 됩니다.</p>\n<pre class="bash"><code>sudo setcap CAP_NET_BIND_SERVICE=+eip ./bin/terrace</code></pre>\n<p>하지만 사용자 계정을 뺏겨도 sudo를 통해 루트 권한을 얻을 수 있기 때문에 이 또한 안전하지는 않습니다. 추후에는 sudo 권한을 얻을 수 없는 web 계정을 통해 올려야할 것입니다. (지금은 개인 블로그이고, 중요한 정보가 담겼다거나 해킹의 위험도 없기 때문에 사용자 계정으로 하는 것입니다.) <br></p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/02/12/blog-webServer/",date:"2019/02/12"},{title:"BLOG - 8. Neovim 설정",author:'<strong>IUS-release.rpm 설치</strong></h3>\n<p>home directory에서</p>\n<pre class="zsh"><code>sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm</code></pre>\n<p>IUS는 리눅스를 위한 Red-Hat Package Manager(RPM) 패키지를 제공하는 Community Project입니다. <a href="https://ius.io/">(Reference1</a>)</p>\n<h3 id="파이썬-설치">파이썬 설치</h3>\n<p>본 블로그에서는 python을 사용하지 않습니다. 하지만 아래에서 설치할 Neovim을 사용하기 위해 python이 필요합니다. 파이썬은 아래와 같이 설치합니다.</p>\n<pre class="bash"><code>sudo yum install -y python36u python36u-libs python36u-devel python36u-pip</code></pre>\n<p>파이썬을 설치한 뒤 아래와 같이 조금 손을 봐줘야합니다. 위와 같이 파이썬을 받아오면 python2와 python3가 같이 받아집니다. python2와 python3가 같이 있는 상황에서 <code>python</code>을 부르면 python2가 불립니다. python3는 <code>python3</code>라고 명시를 해줘야 합니다. <code>python</code>을 불렀을 때 python3를 불러오기 위해 아래와 같이 손을 봐주는 것입니다.</p>\n<pre class="bash"><code>which python3.6\ncd /usr/bin\nsudo rm python3\nsudo rm python\nsudo rm pip \nsudo cp python3.6 python3\nsudo cp python2.7 python\nsudo cp pip3.6 pip</code></pre>\n<h3 id="neovim설치-및-권한-변경">Neovim설치 및 권한 변경</h3>\n<p>Neovim의 목적은 쉽게 말해서 vim보다 Color를 많이 지원해 <strong>예쁜 코드 에디터</strong>를 제공하기 위함입니다.</p>\n<pre class="bash"><code>cd\ncd temp\nwget https://github.com/neovim/neovim/releases/download/v0.3.1/nvim.appimage\nchmod 755 nvim.appimage\n./nvim.appimage --appimage-extract\ncd squashfs-root\nsudo mv usr/bin/nvim /usr/bin/nvim\nsudo mv usr/share/nvim /usr/share/nvim\nnvim</code></pre>\n<p>이렇게 하면 Neovim이 실행되는 걸 볼 수 있습니다. <code>--appimage-extract</code>는 appimage의 콘텐츠를 추출하는 기능을 한다. <a href="https://github.com/AppImage/AppImageKit/wiki/Extracting-AppImages">(Reference2)</a></p>\n<p><code>chmod 755</code> 에서 chmod는 <strong>ch</strong>ange <strong>mod</strong>e 의 약자이며, 대상 파일과 디렉토리의 사용권한을 변경하는 명렁어입니다. 문자열 모드와 8진법 수 모드가 있는데 755는 8진법 수 모드를 사용한 것입니다.</p>\n<p>755에서<br />첫번째 숫자(7) = user의 권한<br />두번째 숫자(5) = group의 권한<br />세번째 숫자(5) = other의 권한<br />을 뜻합니다.</p>\n<p>755 = rwxr-xr-x 로 풀어쓸 수 있습니다. r은 파일 읽기 = 4, w는 파일 쓰기 = 2, x는 파일 실행 = 1를 뜻합니다. 즉 755는 user는 읽고, 쓰고, 실행할 수 있고, group과 other은 읽고, 실행만 할 수 있다는 뜻입니다. 4 = 2^2, 2 = 2^1, 1 = 2^0이기 때문에 각각 4, 2, 1이고 8진법 수 모드라 하는 것입니다.</p>\n<p>읽기, 쓰기, 실행이 가능하다고 할 때, r: 4, w:2, x:1이기 때문에 4+2+1 = 7이 되는 것이고, 읽기, 실행만 가능하다고 할 때는, r:4, x:1이기 때문에 4+1 = 5가 되는 것입니다. 이렇게 숫자의 조합으로 3자리를 표현하면 됩니다. <code>chmod 777</code>은 모든 보안을 꺼버립니다. <a href="http://www.incodom.kr/Linux/%EA%B8%B0%EB%B3%B8%EB%AA%85%EB%A0%B9%EC%96%B4/chmod">(Reference3)</a></p>\n<p>chmod로 권한을 변경하기 전 nvim.appimage의 권한은 아래와 같이 664입니다. (<code>ls -al</code>로 권한을 자세히 볼 수 있음)</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/02/11/8_1.PNG" alt="권한설정 전 nvim.appimage" /><figcaption>권한설정 전 nvim.appimage</figcaption>\n</figure>\n<p>-rw-rw-r-- : 파일 접근 권한 분류 표기로, 처음 -는 파일 분류 타입을 뜻합니다. (파일 타입 : d 디렉토리, l(소문자 L) 링크 카운터, s 소켓, p 파이프, - 일반, c 특수문자, b 특수블럭)</p>\n<p>664이면 실행이 안되므로 아래와 같이 실행이 가능하게 755로 바꿔줬습니다. 또한, user말고 다른 사람은 파일 쓰기를 못하게 한 것입니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/02/11/8_2.PNG" alt="권한설정 후 nvim.appimage" /><figcaption>권한설정 후 nvim.appimage</figcaption>\n</figure>\n<pre class="bash"><code>sudo mv usr/bin/nvim /usr/bin/nvim\nsudo mv usr/share/nvim /usr/share/nvim</code></pre>\n<p>위 코드는 현재 temp/squashfs-root 디렉토리 안에 있는 nvim을 환경변수가 있는 곳으로 옮겨준다는 뜻입니다. nvim도 어디서든 사용할 수 있게 하는 명령어입니다.</p>\n<h3 id="vundle-설치">Vundle 설치</h3>\n<pre class="bash"><code>cd\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></pre>\n<p>Vundle은 vim + Bundle의 합성어로 vim의 플러그인을 통합 관리해주는 도구입니다.</p>\n<h3 id="vim-config-설치">Vim config 설치</h3>\n<pre class="bash"><code>cd ~/.config\ngit clone https://github.com/hrzon/mjVimPack\nmv mjVimPack nvim\nnvim\n# (enter, esc 후에)\n:PluginInstall\n:UpdateRemotePlugins\n:q\nnvim</code></pre>\n<p>명재선생님이 만들어 놓은 mjVimPack을 nvim으로 수정하고 실행하면 정상적으로 작동하는 것을 볼 수 있습니다. 이제 .zshrc에 아래 코드를 추가해줍니다. 그러면 nvim이 아니라 v라고만 쳐도 nvim을 실행시킬 수 있습니다.</p>\n<pre class="bash"><code>alias v=&quot;nvim&quot;</code></pre>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/02/11/blog-settingNeovim/",date:"2019/02/11"},{title:"BLOG - 7. Go 언어 설치",author:'다른 언어를 사용해도 되지만 본 프로젝트에서는 Go 언어를 사용할 것입니다. Go 언어 설치를 위해서는 home directory에서</p>\n<pre class="bash"><code>mkdir temp\ncd temp\nsudo yum -y install wget\nwget https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz</code></pre>\n<p>wget으로 받아오는 go 버전은 계속 업그레이드가 될 수 있으므로 최신버전으로 설치합니다. golang 홈페이지에 들어가면 아래와 같이 Linux 최신버전을 볼 수 있습니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/02/10/7_1.PNG" alt="golang 메인 홈페이지" /><figcaption>golang 메인 홈페이지</figcaption>\n</figure>\n<p>go를 다운받을 때 확장자가 tar.gz입니다. 이는 압축 확장자이며, 압축을 풀어 사용할 수 있습니다. 다운받은 go 아카이브의 압축을 아래와 같이 풉니다. <a href="http://sarghis.com/blog/468/">(Reference1)</a> temp directory에서</p>\n<pre class="bash"><code>tar -xzvf go1.11.4.linux-amd64.tar.gz</code></pre>\n<pre class="bash"><code>sudo mv go /usr/local/</code></pre>\n<pre class="bash"><code>vi ~/.zshrc</code></pre>\n<p>아래처럼, 환경변수 $PATH를 추가시킵니다. 환경변수를 추가시킴으로써 go를 어떤 디렉토리에서도 실행할 수 있게 합니다.</p>\n<pre class="bash"><code>export PATH=/usr/local/go/bin:$PATH</code></pre>\n<pre class="bash"><code>source ~/.zshrc</code></pre>\n<p>$PATH는 환경 변수를 뜻합니다. 터미널에서 프로그램 명령어를 입력하면 $PATH 환경 변수에 저장된 디렉토리 목록에서 명령을 찾습니다. $PATH에 현재 나열된 목록을 확인하려면 아래와 같이 입력하면 됩니다.</p>\n<pre class="bash"><code>echo $PATH</code></pre>\n<p>그러면 아래와 같이 콜론으로 구분된 디렉토리 목록이 반환됩니다.</p>\n<pre class="bash"><code>/usr/local/go/bin:/usr/local/bin:/usr/bin:/home/bkshin/bin:/usr/local/sbin:/usr/sbin</code></pre>\n<p>위에서 go 디렉토리도 추가했기 때문에 /usr/local/go/bin도 잘 추가된 것을 볼 수 있습니다. <a href="https://askubuntu.com/questions/551990/what-does-path-mean">(Reference2)</a> 이제 아무 디렉토리에서나 <code>go</code>를 입력해주면 go가 잘 작동하는 할 것입니다.</p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/02/10/blog-installGolang/",date:"2019/02/10"},{title:"BLOG - 6. 개발환경세팅 II",author:'<strong>NPM설치</strong></h3>\n<p>NPM(Node Package Manager)란 자바스크립트 기반의 패키지 매니저입니다. <a href="https://www.w3schools.com/nodejs/nodejs_npm.asp">(Reference1)</a> 이름처럼 NPM은 Node.js로 만들어진 모듈을 웹에서 받아 설치하고 관리해주는 프로그램입니다. 사용자는 명령어를 통해 공개된 모듈을 설치하고 활용할 수 있습니다.</p>\n<p>NPM 및 vue-cli 3.0을 아래와 같이 설치할 수 있습니다. vue-cli를 통해 터미널에서 간단한 명령어로 프로젝트 디렉토리를 만들 수 있습니다.</p>\n<pre class="bash"><code>sudo yum -y install npm\nsudo npm install -g @vue/cli</code></pre>\n<p>(-g는 global의 약자이며, 다른 계정들에서도 사용할 수 있음)</p>\n<pre class="bash"><code>vue --verison</code></pre>\n<p>을 치면 Node version을 업그레이드 하라는 경고 메시지가 나올 겁니다.</p>\n<h3 id="npm-업그레이드">NPM 업그레이드</h3>\n<pre class="bash"><code>sudo npm cache clean -f\nsudo npm install -g n\nsudo n stable</code></pre>\n<p>위 코드로 NPM 업그레이드를 합니다. 우선, 강제로 캐시를 제거하고, n 모듈을 설치합니다. 마지막으로 n모듈을 사용하여 Node.js를 설치합니다. <a href="https://velopert.com/1351">(Reference2)</a></p>\n<pre class="bash"><code>vue --verison</code></pre>\n<p>을 치면 이제 정상적으로 verison 정보가 뜹니다.</p>\n<h3 id="project-directory-구성">Project Directory 구성</h3>\n<pre class="bash"><code>cd\nmkdir terrace\ncd terrace\nmkdir frontend\nvue create home</code></pre>\n<p>Project main directory(여기서는 terrace)를 만들고 그 하단에 frontend directory를 만든 뒤 vue를 create합니다. vue-cli가 home directory 하단에 자동으로 project directory를 만들어 줍니다. \'기본 npm registry는 느리다고 더 빠른 installation을 하겠습니까?\'라는 메시지가 뜨면 Yes를 해줍니다. 그 후 default (babel, eslint)를 선택해주고 설치합니다.</p>\n<p>home directory로 들어가보면 아래와 같이 기본적인 project directory가 구성되어 있을 것입니다.</p>\n<ul>\n<li>dist: 빌드 결과물이 담겨 있는 디렉토리입니다. <code>npm run build</code> 시 내용물이 담깁니다. 빌드에 대해서는 나중에 다시 설명하겠습니다.</li>\n<li>node_modules: npm 으로 설치한 것들이 담겨있는 폴더입니다. 용량이 꽤 크기 때문에 github에 올리면 안됩니다. (.gitignore에 추가)</li>\n<li>public: 공용으로 접근 가능한 파일이 위치합니다. favicon, 블로그 아티클 등이 담깁니다.</li>\n<li>src: vue 소스코드가 담깁니다.</li>\n</ul>\n<p>나머지 json이나 js파일은 직접 건들 건 아니기 때문에 신경쓰지 맙시다. <a href="http://vuejs.kr/vue/vue-cli/2018/01/27/vue-cli-3/">(Reference3)</a></p>\n<pre class="bash"><code>cd home\nnpm run serve</code></pre>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/01/28/6_1.PNG" alt="App running" /><figcaption>App running</figcaption>\n</figure>\n<p>run serve후에 위와 같이 뜨면 정상적으로 성공한 것입니다.</p>\n<p>이제 아래 명령어로 빌드를 해줍니다.</p>\n<pre class="bash"><code>npm run build</code></pre>\n<p>build 결과물은 dist directory에 담깁니다.</p>\n<h3 id="http-server-설치">http-server 설치</h3>\n<p>로컬에서 만든 작업물을 웹 상에서 띄우기 위해서는 웹 서버가 필요합니다. 여기서는 http-server를 사용할 것이며, 웹 서버에 대한 이해가 부족하다면 <a href="https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_web_server">(Reference4)</a> 링크를 참고하시기 바랍니다.</p>\n<pre class="bash"><code>cd dist\nsudo npm install –g http-server \nhttp-server .</code></pre>\n<p>위와 같이 dist 디렉토리에 http-server를 설치합니다. http-server 옆에 .은 현재 디렉토리를 의미합니다. <a href="https://www.npmjs.com/package/http-server">(Reference5)</a></p>\n<h3 id="localhost-접속">localhost 접속</h3>\n<p>http-server를 실행했기 때문에 인터넷을 켜서 주소창에 localhost:8881을 치면 Vue 기본 페이지가 떠야하는데 뜨질 않습니다. (localhost옆에 :8881은 호스트 포트를 의미함)</p>\n<p>이는 방화벽이 막혀있어서 그런 것입니다.</p>\n<p>home directory에서 아래와 같이 포트에 방화벽을 열어줍니다. (8080, 80 등이 포트를 의미함)</p>\n<pre class="bash"><code>sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent\nsudo firewall-cmd --zone=public --add-port=80/tcp --permanent\nsudo firewall-cmd --reload</code></pre>\n<p>이젠 http-server . 혹은 npm run serve를 한 뒤 localhost:8881로 접속하면 vue 기본 페이지가 뜹니다.</p>\n<figure>\n<img src="https://cdn.bkshin.com/devRecord/2019/01/28/6_2.PNG" alt="Vue 기본 페이지" /><figcaption>Vue 기본 페이지</figcaption>\n</figure>\n<p>frontend directory 안에서 vue-cli로 home project를 생성했습니다. home directory 밑에는 서버와 배포시스템이 추가됩니다. frontend directory 밑에는 문서 변환과 프리렌더링 프로그램이 추가될 것입니다. <strong>드디어 눈에 보이는 무언가가 생겨났습니다!</strong><br /><br></p>\n<h2 id="reference">Reference',uri:"/devRecordBlog/2019/01/28/blog-setting2/",date:"2019/01/28"},{title:"BLOG - 5. 개발환경세팅 I",author:"myself",uri:"/devRecordBlog/2019/01/24/blog-setting1/",date:"2019/01/24"},{title:"BLOG - 4. PuTTY로 가상환경 접속",author:"myself",uri:"/devRecordBlog/2019/01/23/blog-puttyConnection/",date:"2019/01/23"},{title:"BLOG - 3. 네트워크 포트포워딩",author:"myself",uri:"/devRecordBlog/2019/01/22/blog-portForwarding/",date:"2019/01/22"},{title:"BLOG - 2. 네트워크 연결 및 커널",author:"myself",uri:"/devRecordBlog/2019/01/21/blog-network/",date:"2019/01/21"},{title:"BLOG - 1. 가상환경 설치 및 실행",author:"myself",uri:"/devRecordBlog/2019/01/20/blog-CentOS/",date:"2019/01/20"},{title:"첫 글",author:"myself",uri:"/devRecordBlog/2018/12/12/thanks-to/",date:"2018/12/12"}],year:this.$route.params.year2,month:this.$route.params.month2,day:this.$route.params.day2,title:this.$route.params.title2,articleHtmlSource:"",address:"",domain:"https://bkshin.com/devRecordBlog"}},watch:{$route:function(e){this.year=e.params.year2,this.month=e.params.month2,this.day=e.params.day2,this.title=e.params.title2,this.getPage()}}},l=c,p=(t("5248"),t("2877")),d=Object(p["a"])(l,o,r,!1,null,"25bbcda0",null);d.options.__file="DevRecordBlog.vue";n["default"]=d.exports},b65b:function(e,n){e.exports=function(e){return{aliases:["console"],contains:[{className:"meta",begin:"^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]",starts:{end:"$",subLanguage:"bash"}}]}}},c6f5:function(e,n,t){},d248:function(e,n){e.exports=function(e){var n={begin:/\|[A-Za-z]+:?/,keywords:{name:"truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone"},contains:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE]};return{aliases:["jinja"],case_insensitive:!0,subLanguage:"xml",contains:[e.COMMENT(/\{%\s*comment\s*%}/,/\{%\s*endcomment\s*%}/),e.COMMENT(/\{#/,/#}/),{className:"template-tag",begin:/\{%/,end:/%}/,contains:[{className:"name",begin:/\w+/,keywords:{name:"comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim"},starts:{endsWithParent:!0,keywords:"in by as",contains:[n],relevance:0}}]},{className:"template-variable",begin:/\{\{/,end:/}}/,contains:[n]}]}}},f0f8:function(e,n){e.exports=function(e){var n={className:"variable",variants:[{begin:/\$[\w\d#@][\w\d_]*/},{begin:/\$\{(.*?)}/}]},t={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,n,{className:"variable",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]}]},o={className:"string",begin:/'/,end:/'/};return{aliases:["sh","zsh"],lexemes:/\b-?[a-z\._]+\b/,keywords:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",_:"-ne -eq -lt -gt -f -d -e -s -l -a"},contains:[{className:"meta",begin:/^#![^\n]+sh\s*$/,relevance:10},{className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0},e.HASH_COMMENT_MODE,t,o,n]}}}}]);
//# sourceMappingURL=chunk-67ecb446.d11af1ef.js.map